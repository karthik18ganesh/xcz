{"remainingRequest":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\src\\components\\TaggingLanding.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\src\\components\\TaggingLanding.vue","mtime":1634208004280},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["TaggingLanding.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <v-container class=\"mainDiv\" style=\"margin-top: 50px\">\r\n    <v-dialog\r\n      content-class=\"my-custom-dialog\"\r\n      v-model=\"tallyIntegrationDialog\"\r\n      width=\"75vw\"\r\n      transition=\"dialog-bottom-transition\"\r\n    >\r\n    <div style=\"height:75vh;width:98%\">\r\n      <h1\r\n        class=\"text-h5 lighten-2 popup-allotment-title\"\r\n        style=\"font-size: 20px !important\"\r\n      >\r\n      STEPS TO Integrate\r\n      </h1>\r\n      <v-divider class=\"blueUline2\"></v-divider>\r\n      <div style=\"margin: 15px 0px;\">Because of Browser securities Issues ,we cant directly access the local tally system to import Data from it. </div>\r\n    <div style=\"margin: 15px 0px;\">Please follow the below two step to achive the Local tally integration</div>\r\n    <v-row>\r\n      <v-col xs5 style=\"height: 50vh;margin-left: 20px;margin-top: 10px;\">\r\n        <img src=\"https://www.keycdn.com/img/support/cors.png\" width=\"100%\" height=\"100%\" alt=\"no image found\"/>\r\n        </v-col>\r\n    <v-col xs6 style=\"display: flex;flex-direction: column;justify-content: center;text-align: start;\">\r\n      <div style=\"margin: 10px;margin-left: 50px;\">Step 1: Add the below extension in your browser</div>\r\n      <div style=\"margin: 10px;margin-bottom: 50px;margin-left: 50px;\"><a target=\"_blank\" href=\"https://chrome.google.com/webstore/detail/cors-unblock/lfhmikememgdcahcdlaciloancbhjino\">Tally Browser Extension</a></div>\r\n      <div style=\"margin: 10px;margin-left: 50px;\">Step 2: Download and open the file to import from tally </div>\r\n      <div style=\"margin: 10px;margin-left: 50px;cursor: pointer;\" @click=\"downLoadFile\"><p style=\"text-decoration-line: underline;color: #1976d2;cursor: pointer;\" >Download tally integration file</p></div>\r\n      <div style=\"margin: 10px;margin-left: 50px;cursor: pointer;\" @click=\"useExistingFile\"><v-btn\r\n            class=\"ma-2\"\r\n            style=\"\r\n              background-color: #03a9f4 !important;\r\n    border-color: #03a9f4;\r\n    padding: 2px 0px;\r\n    width: 38%;\r\n    margin: 0px !important;\r\n    margin-top: -9px !important;\r\n    color: #fff;\r\n            \"\r\n            color=\"#03a9f4\"\r\n          >\r\n           Or Use Existing file\r\n          </v-btn></div>\r\n    </v-col>        \r\n    </v-row>\r\n    </div>\r\n    </v-dialog>\r\n    <v-row>\r\n      <v-col cols=\"12\">\r\n        <v-row\r\n          class=\"topRow alig\"\r\n          v-bind:class=\"{\r\n            minTop: activeUploadOption == 'tally',\r\n            maxTop: activeUploadOption != 'tally',\r\n          }\"\r\n        >\r\n          <v-col cols=\"5\" class=\"ma-1 marg\" align=\"right\">\r\n            <v-btn\r\n              large\r\n              @click=\"UploadOptionSelected('tally')\"\r\n              color=\"white\"\r\n              class=\"btn1 btn2 pa-6\"\r\n              :style=\"{\r\n                visibility: uploadOptionSelected ? 'hidden' : 'visible',\r\n              }\"\r\n              >Import from Tally</v-btn\r\n            >\r\n          </v-col>\r\n          <v-col align=\"left\" cols=\"5\" class=\"ma-1\">\r\n            <v-btn\r\n              large\r\n              @click=\"UploadOptionSelected('excel')\"\r\n              color=\"white\"\r\n              class=\"btn1 btn2 pa-6\"\r\n              :style=\"{\r\n                visibility: uploadOptionSelected ? 'hidden' : 'visible',\r\n              }\"\r\n              >Import from Excel</v-btn\r\n            >\r\n          </v-col>\r\n        </v-row>\r\n      </v-col>\r\n\r\n      <v-col cols=\"6\">\r\n        <img\r\n          src=\"../assets/sukuman.png\"\r\n          alt=\"sukman\"\r\n          height=\"400\"\r\n          width=\"390\"\r\n          class=\"img-logo\"\r\n        />\r\n      </v-col>\r\n      <v-col cols=\"6\">\r\n        <v-row v-if=\"activeUploadOption == 'tally'\">\r\n          <v-col\r\n            align=\"left\"\r\n            style=\"padding-left: 0px; padding-bottom: 20px\"\r\n            cols=\"12\"\r\n          >\r\n            <h4 style=\"margin-bottom: 10px\">\r\n              <u style=\"text-decoration: none; margin: 3px\">\r\n                Import From Tally</u\r\n              >\r\n            </h4>\r\n          </v-col>\r\n          <v-col cols=\"12\" class=\"pa-1\">\r\n            <v-select\r\n              dense\r\n              outlined\r\n              label=\"Name of the Organization\"\r\n              v-model=\"selectedCompany\"\r\n              :items=\"companies\"\r\n              item-text=\"name\"\r\n              item-value=\"id\"\r\n            ></v-select>\r\n          </v-col>\r\n          <v-col cols=\"6\" class=\"LabelText pa-1\">\r\n            <v-menu\r\n              :close-on-content-click=\"true\"\r\n              :nudge-right=\"40\"\r\n              transition=\"scale-transition\"\r\n              offset-y\r\n            >\r\n              <template v-slot:activator=\"{ on, attrs }\">\r\n                <v-text-field\r\n                  autocomplete=\"off\"\r\n                  :value=\"fromPeriod\"\r\n                  outlined\r\n                  style=\"width: 95%\"\r\n                  label=\"Period From\"\r\n                  append-icon=\"mdi-calendar\"\r\n                  readonly\r\n                  dense\r\n                  v-bind=\"attrs\"\r\n                  v-on=\"on\"\r\n                ></v-text-field>\r\n              </template>\r\n              <v-date-picker\r\n                color=\"#006B6A\"\r\n                label=\"From Period\"\r\n                v-model=\"fromPeriod\"\r\n                outlined\r\n                dense\r\n              ></v-date-picker>\r\n            </v-menu>\r\n          </v-col>\r\n          <v-col cols=\"6\" class=\"LabelText pa-1\">\r\n            <v-menu\r\n              :close-on-content-click=\"true\"\r\n              :nudge-right=\"40\"\r\n              transition=\"scale-transition\"\r\n              offset-y\r\n            >\r\n              <template v-slot:activator=\"{ on, attrs }\">\r\n                <v-text-field\r\n                  autocomplete=\"off\"\r\n                  :value=\"fromPeriod\"\r\n                  outlined\r\n                  label=\"Period To\"\r\n                  style=\"width: 95%; float: right\"\r\n                  append-icon=\"mdi-calendar\"\r\n                  readonly\r\n                  dense\r\n                  v-bind=\"attrs\"\r\n                  v-on=\"on\"\r\n                ></v-text-field>\r\n              </template>\r\n              <v-date-picker\r\n                color=\"#006B6A\"\r\n                label=\"From Period\"\r\n                v-model=\"fromPeriod\"\r\n                outlined\r\n                dense\r\n              ></v-date-picker>\r\n            </v-menu>\r\n          </v-col>\r\n          <v-col cols=\"6\" class=\"pa-1\">\r\n            <v-select\r\n              style=\"width: 95%\"\r\n              dense\r\n              outlined\r\n              label=\"Import Level\"\r\n              v-model=\"selectedImportLevel\"\r\n              :items=\"['Closing Balance', 'Opening and Closing Balance']\"\r\n            ></v-select>\r\n          </v-col>\r\n          <v-col cols=\"12\" align=\"right\">\r\n            <v-btn class=\"primary ma-2\" color=\"white\" @click=\"importFromTally\">\r\n              Import\r\n            </v-btn>\r\n            <v-btn class=\"ma-2\" outlined color=\"primary\" @click=\"cancelImport\">\r\n              Cancel\r\n            </v-btn>\r\n          </v-col>\r\n        </v-row>\r\n      </v-col>\r\n    </v-row>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport store from \"../store\";\r\nimport moment from \"moment\";\r\n// var convert = require('xml-js');\r\nexport default {\r\n  name: \"TaggingHome\",\r\n  data() {\r\n    return {\r\n      tallyIntegrationDialog:false,\r\n      activeUploadOption: \"\",\r\n      uploadOptionSelected: false,\r\n      fromPeriod: \"\",\r\n      selectedCompany: \"\",\r\n      taggedLedgerData: [],\r\n      companies: [\"BSY Private Limited\"],\r\n    };\r\n  },\r\n  async mounted() {\r\n    this.allTagHeaders = this.$store.getters.tagHeaders;\r\n   },\r\n\r\n  methods: {\r\n    async checkStatus(id) {\r\n      var res = await this.$apiService.post(\"/taggingUplStatus/get\", {\r\n        taggingUplStatusId: id.data,\r\n        companyId: 21,\r\n      });\r\n      // console.log(res.data.data)\r\n      store.commit(\"SET_IS_LOADING\", true);\r\n      if (res && res.data.data) {\r\n        clearInterval(this.myVar);\r\n        store.commit(\"SET_IS_LOADING\", false);\r\n        this.$router.push({ path: \"/taggingdisplay\" });\r\n      }\r\n    },\r\n    async importFromTally() {\r\n      this.$router.push({ path: \"/taggingdisplay\" });\r\n      //--\r\n      //  store.commit('SET_IS_LOADING', true);\r\n      //create entry in status table\r\n      // var statusPayload ={\"companyId\": \"21\",\"period_from\": \"2020-08-07\",\"period_to\": \"2021-08-07\"};\r\n      // var res = await this.$apiService.post(\"/taggingUplStatus\", statusPayload);\r\n      //   if (res && res.status === 200) {\r\n      //     store.commit('SET_IS_LOADING', true);\r\n      //     this.myVar = setInterval(()=>this.checkStatus(res.data), 3000);\r\n      //   }\r\n      // fetch(\"https://jsonip.com/\").then(val=>val.json()).then(async val=>{\r\n      // console.log(val,\"suc\",{\"id\":val.ip});\r\n      //    var res = await this.$apiService.post(\"/tally/getcompany\", {\"ip\":val.ip});\r\n      //   if (res && res.status === 200) {\r\n      //     console.log(res.data.data.elements[0].elements[0].elements[0].elements,\"list of comapnies\")\r\n      //   }\r\n\r\n      // }\r\n      // ).catch(val=>console.log(val,\"failed\"))\r\n      // var res = await this.$apiService.post(\"/tally/getcompany\", statusPayload);\r\n      // if (res && res.status === 200) {\r\n      //   store.commit('SET_IS_LOADING', true);\r\n      //   this.myVar = setInterval(()=>this.checkStatus(res.data), 3000);\r\n      // }\r\n      //--\r\n      // var parentArray=[];\r\n      //   try{\r\n      //       var res = await this.$apiService.get(`/processing/taggedledger/${'1'}`);\r\n      //       if(res&&res.status === 200) {\r\n\r\n      //           this.taggedLedgerData=res.data;\r\n      //           if(res.data.length>0){\r\n      //              let unique = [...new Set(res.data.map(item => item.parent))];\r\n      //              unique.forEach(row=>{\r\n      //                parentArray.push({name:row,validate:false})\r\n      //              })\r\n\r\n      //              this.$router.push({name: 'TaggingDsiplay', params : { displayData: res.data,parent:parentArray}});\r\n\r\n      //           }\r\n\r\n      //         if (res.data.status === \"error\") {\r\n      //   console.log(\"error\");\r\n      //         }\r\n\r\n      //   }\r\n\r\n      //   }\r\n      //   catch(error) {\r\n      //    // this.showError(\"Unable to Get Company Details\");\r\n      //      }\r\n    },\r\n    cancelImport() {\r\n      this.uploadOptionSelected = false;\r\n      this.activeUploadOption = \"\";\r\n    },\r\n    async startListerning(value){\r\n      store.commit('SET_IS_LOADING', true); \r\n      console.log(value,\"val1\")\r\n      var watch = setInterval(async () => {\r\n        fetch(`http://localhost:8080/tallyintegration/register/get?registerId=${value.data.registerId}`).then(res=>res.json()).then(async res=>{\r\n      if (res ) {\r\n        console.log(res);\r\n        if(res.data){\r\n          clearInterval(watch);\r\n        store.commit('SET_IS_LOADING', true); \r\n        var idf = JSON.parse(sessionStorage.getItem(\"fina\")).id;\r\n            //get reporting periodid and company type\r\n        var resRequiredDetails = await this.$apiService.get('ledger/requiredvalues?financialId='+idf);\r\n        if(resRequiredDetails&&resRequiredDetails.status === 200) {  \r\n          sessionStorage.setItem(\"reportId\",resRequiredDetails.data.data.reportingPeriodData);\r\n          sessionStorage.setItem(\"companyType\",resRequiredDetails.data.data.companyType);\r\n          sessionStorage.setItem(\"taggingLevel\",resRequiredDetails.data.data.taggingLevel);\r\n          setTimeout(() => {\r\n            this.$router.push({ path: \"/taggingdisplay\" });\r\n          }, 100);  \r\n        }\r\n        }\r\n      }    \r\n      else{\r\n        clearInterval(watch);\r\n      }\r\n        })\r\n\r\n      }, 10000);\r\n    },\r\n    async downLoadFile(){\r\n    var time = moment().valueOf();\r\n      // fetch('http://13.234.27.65:8080/index?time='+time)\r\n      fetch('http://localhost:8080/tallyintegration?time='+time)\r\n  .then(resp => resp.blob())\r\n  .then(blob => {\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.style.display = 'none';\r\n    a.href = url;\r\n    // the filename you want\r\n    a.download = 'tallyIntegration.html';\r\n    // a.target = \"_blank\";\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  })\r\n  .catch(() => alert('try again..'));\r\n  this.tallyIntegrationDialog = false;\r\n  store.commit('SET_IS_LOADING', true); \r\n  var res = await this.$apiService.post(`/tallyintegration/register`,{userId:JSON.parse(sessionStorage.userDetails).data.id,companyId:JSON.parse(sessionStorage.fina).company_id,financialId:JSON.parse(sessionStorage.fina).id,otherDetails:JSON.parse(sessionStorage.fina)});\r\n      if (res && res.status === 200) {\r\n        this.startListerning(res);\r\n      }\r\n    },\r\n   async useExistingFile(){\r\n     this.tallyIntegrationDialog = false;\r\n        store.commit('SET_IS_LOADING', true); \r\n  var res = await this.$apiService.post(`/tallyintegration/register`,{userId:JSON.parse(sessionStorage.userDetails).data.id,companyId:JSON.parse(sessionStorage.fina).company_id,financialId:JSON.parse(sessionStorage.fina).id,otherDetails:JSON.parse(sessionStorage.fina)});\r\n      if (res && res.status === 200) {\r\n        this.startListerning(res);\r\n      }\r\n    },\r\n    UploadOptionSelected(val) {\r\n      console.log(val,\"val\")\r\n      // this.uploadOptionSelected = true;\r\n      // this.activeUploadOption = val;\r\n      this.tallyIntegrationDialog = true;\r\n  //     if(val == \"tally\"){\r\n  //             var time = moment().valueOf();\r\n  //     // fetch('http://13.234.27.65:8080/index?time='+time)\r\n  //     fetch('http://localhost:8080/index?time='+time)\r\n  // .then(resp => resp.blob())\r\n  // .then(blob => {\r\n  //   const url = window.URL.createObjectURL(blob);\r\n  //   const a = document.createElement('a');\r\n  //   a.style.display = 'none';\r\n  //   a.href = url;\r\n  //   // the filename you want\r\n  //   a.download = 'tallyIntegration.html';\r\n  //   // a.target = \"_blank\";\r\n  //   document.body.appendChild(a);\r\n  //   a.click();\r\n  //   window.URL.revokeObjectURL(url);\r\n  // })\r\n  // .catch(() => alert('oh no!'));\r\n  //     }\r\n    },\r\n    async saveAllLedgers() {\r\n      var res = await this.$apiService.put(\r\n        `processing/tagging/update`,\r\n        this.taggedLedgerData\r\n      );\r\n      if (res && res.status === 200) {\r\n        this.showSuccess(res.data.message);\r\n        this.$refs.table.refresh();\r\n        await this.getAllLedgerData(this.selectedCompany);\r\n        await this.getTaggingTreeData();\r\n        console.log(\"success\");\r\n      }\r\n      if (res.data.status === \"error\") {\r\n        console.log(\"error\");\r\n      }\r\n    },\r\n    async onTagTreeSubmit(data) {\r\n      console.log(data);\r\n      this.$refs.treeTable.refresh();\r\n      this.filterTaggingTree(this.selectedTag);\r\n    },\r\n    async onLedgerSubmit(data) {\r\n      let putData = [];\r\n      putData.push(data);\r\n      var res = await this.$apiService.put(\r\n        `processing/tagging/update`,\r\n        putData\r\n      );\r\n      if (res && res.status === 200) {\r\n        this.showSuccess(res.data.message);\r\n        this.$refs.table.refresh();\r\n        await this.getAllLedgerData(this.selectedCompany);\r\n        await this.getTaggingTreeData();\r\n        console.log(\"success\");\r\n      }\r\n      if (res.data.status === \"error\") {\r\n        console.log(\"error\");\r\n      }\r\n      console.log(data);\r\n    },\r\n    ledgerGroup1Changed(value) {\r\n      let group2 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (x) => x.group1 == value.group1\r\n      );\r\n      if (tagFilter.length == 0) return;\r\n\r\n      if (tagFilter.length != 0) {\r\n        tagFilter[0].group2.forEach((element) => {\r\n          group2.push(element.group2name);\r\n        });\r\n      }\r\n      if (group2.length > 0) {\r\n        if (\r\n          this.tempGroup2Arryay.filter((x) => x.ledgerid == value.ledgerid)\r\n            .length == 0\r\n        ) {\r\n          this.tempGroup2Arryay.push({\r\n            ledgerid: value.ledgerid,\r\n            group2: group2,\r\n          });\r\n        } else {\r\n          this.tempGroup2Arryay.filter(\r\n            (x) => x.ledgerid == value.ledgerid\r\n          )[0].group2 = group2;\r\n          this.taggedLedgerData.filter(\r\n            (x) => x.ledgerid == value.ledgerid\r\n          )[0].group2 = null;\r\n          //console.log(this.taggedLedgerData.filter(x=>x.ledgerid==value.ledgerid)[0],\"shum\")\r\n        }\r\n      }\r\n      this.$refs.table.refresh();\r\n    },\r\n\r\n    ledgerGroup2Changed(item) {\r\n      debugger; // eslint-disable-line no-debugger\r\n      let group3 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter((x) => x.group1 == item.group1);\r\n      if (tagFilter.length == 0) return;\r\n\r\n      var tag3Filter = tagFilter[0].group2.filter(\r\n        (x) => x.group2name == item.group2\r\n      );\r\n      if (tag3Filter.length != 0) {\r\n        tag3Filter[0].group3.forEach((element) => {\r\n          group3.push(element);\r\n        });\r\n      }\r\n      if (group3.length > 0) {\r\n        if (\r\n          this.tempGroup3Arryay.filter((x) => x.ledgerid == item.ledgerid)\r\n            .length == 0\r\n        ) {\r\n          this.tempGroup3Arryay.push({\r\n            ledgerid: item.ledgerid,\r\n            group3: group3,\r\n          });\r\n        } else {\r\n          this.tempGroup3Arryay.filter(\r\n            (x) => x.ledgerid == item.ledgerid\r\n          )[0].group3 = group3;\r\n          this.taggedLedgerData.filter(\r\n            (x) => x.ledgerid == item.ledgerid\r\n          )[0].group3 = null;\r\n          //console.log(this.taggedLedgerData.filter(x=>x.ledgerid==value.ledgerid)[0],\"shum\")\r\n        }\r\n      }\r\n      this.$refs.table.refresh();\r\n    },\r\n    ledgerTagChanged(value) {\r\n      console.log(value, \"ledgerTagChanged\");\r\n      let group1 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (x) => x.tagheader == value.item.taggingheader\r\n      );\r\n      tagFilter[0].group1.forEach((element) => {\r\n        group1.push(element.group1name);\r\n      });\r\n      if (group1.length > 0) {\r\n        if (\r\n          this.tempGroup1Arryay.filter((x) => x.ledgerid == value.item.ledgerid)\r\n            .length == 0\r\n        ) {\r\n          this.tempGroup1Arryay.push({\r\n            ledgerid: value.item.ledgerid,\r\n            group1: group1,\r\n          });\r\n        } else {\r\n          this.tempGroup1Arryay.filter(\r\n            (x) => x.ledgerid == value.item.ledgerid\r\n          )[0].group1 = group1;\r\n          this.taggedLedgerData.filter(\r\n            (x) => x.ledgerid == value.item.ledgerid\r\n          )[0].group1 = null;\r\n          console.log(\r\n            this.taggedLedgerData.filter(\r\n              (x) => x.ledgerid == value.item.ledgerid\r\n            )[0],\r\n            \"shum\"\r\n          );\r\n        }\r\n\r\n        this.$refs.table.refresh();\r\n      }\r\n      console.log(\r\n        this.tempGroup1Arryay.filter(\r\n          (x) => x.ledgerid == value.item.ledgerid\r\n        )[0].group1,\r\n        \"s\"\r\n      );\r\n    },\r\n    tagTreeGroup2Changed(item) {\r\n      let group3 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (row) => row.group1 == item.group1\r\n      );\r\n      if (tagFilter.length == 0) return;\r\n\r\n      var tag3Filter = tagFilter[0].group2.filter(\r\n        (x) => x.group2name == item.group2\r\n      );\r\n      if (tag3Filter.length != 0) {\r\n        tag3Filter[0].group3.forEach((element) => {\r\n          group3.push(element);\r\n        });\r\n      }\r\n      if (group3.length > 0) {\r\n        if (\r\n          this.tempTreeGroup3Arryay.filter((x) => x.id == item.id).length == 0\r\n        ) {\r\n          this.tempTreeGroup3Arryay.push({ id: item.id, group3: group3 });\r\n        } else {\r\n          this.tempTreeGroup3Arryay.filter((x) => x.id == item.id)[0].group3 =\r\n            group3;\r\n          this.taggingTreeData.filter((x) => x.id == item.id)[0].group3 = null;\r\n          //console.log(this.taggedLedgerData.filter(x=>x.ledgerid==value.ledgerid)[0],\"shum\")\r\n        }\r\n      }\r\n      this.$refs.table.refresh();\r\n    },\r\n    tagTreeGroup1Changed(value) {\r\n      let group2 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (row) => row.group1 == value.group1\r\n      );\r\n      if (tagFilter.length == 0) return;\r\n\r\n      if (tagFilter.length != 0) {\r\n        tagFilter[0].group2.forEach((element) => {\r\n          group2.push(element.group2name);\r\n        });\r\n      }\r\n      if (group2.length > 0) {\r\n        if (\r\n          this.tempTreeGroup2Arryay.filter((x) => x.id == value.id).length == 0\r\n        ) {\r\n          this.tempTreeGroup2Arryay.push({ id: value.id, group2: group2 });\r\n        } else {\r\n          this.tempTreeGroup2Arryay.filter((x) => x.id == value.id)[0].group2 =\r\n            group2;\r\n          this.taggingTreeData.filter((x) => x.id == value.id)[0].group2 = null;\r\n          this.taggingTreeData.filter((x) => x.id == value.id)[0].group3 = null;\r\n          //console.log(this.taggedLedgerData.filter(x=>x.ledgerid==value.ledgerid)[0],\"shum\")\r\n        }\r\n      }\r\n    },\r\n    tagTreeTagChanged(value) {\r\n      let group1 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (x) => x.tagheader == value.item.tagheader\r\n      );\r\n      tagFilter[0].group1.forEach((element) => {\r\n        group1.push(element.group1name);\r\n      });\r\n      if (group1.length > 0) {\r\n        if (\r\n          this.tempTreeGroup1Arryay.filter((row) => row.id == value.item.id)\r\n            .length == 0\r\n        ) {\r\n          this.tempTreeGroup1Arryay.push({ id: value.item.id, group1: group1 });\r\n        } else {\r\n          this.tempTreeGroup1Arryay.filter(\r\n            (x) => x.ledgerid == value.item.ledgerid\r\n          )[0].group1 = group1;\r\n          this.taggingTreeData.filter((x) => x.id == value.item.id)[0].group1 =\r\n            null;\r\n          this.taggingTreeData.filter((x) => x.id == value.item.id)[0].group2 =\r\n            null;\r\n          this.taggingTreeData.filter((x) => x.id == value.item.id)[0].group3 =\r\n            null;\r\n          //console.log(this.taggedLedgerData.filter(x=>x.ledgerid==value.item.ledgerid)[0],\"shum\")\r\n        }\r\n\r\n        this.$refs.table.refresh();\r\n      }\r\n      console.log(\r\n        this.tempGroup1Arryay.filter(\r\n          (x) => x.ledgerid == value.item.ledgerid\r\n        )[0].group1,\r\n        \"s\"\r\n      );\r\n    },\r\n    async sendValue(value) {\r\n      if (value === \"all\") {\r\n        this.tagSelected = false;\r\n        this.selectedTag = \"\";\r\n      } else {\r\n        this.tagSelected = true;\r\n        if (this.taggingTreeData.length == 0) {\r\n          await this.getTaggingTreeData();\r\n          this.filterTaggingTree(value);\r\n          this.selectedTag = value;\r\n        } else {\r\n          this.filterTaggingTree(value);\r\n          this.selectedTag = value;\r\n        }\r\n      }\r\n    },\r\n    checkip(ip) {\r\n      console.log(ip, \"checkip\");\r\n    },\r\n    getGroup2Items(item) {\r\n      this.tempSelect = []; // eslint-disable-line no-debugger\r\n      let group1 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (x) => x.tagheader == item.tagheader\r\n      );\r\n      if (tagFilter.length == 0) return;\r\n      var tag2Filter = tagFilter[0].group1.filter(\r\n        (x) => x.group1name == item.group1\r\n      );\r\n      if (tag2Filter.length != 0) {\r\n        tag2Filter[0].group2.forEach((element) => {\r\n          group1.push(element.group2name);\r\n        });\r\n      }\r\n\r\n      this.tempSelect = group1;\r\n    },\r\n    getGroup3Items(item) {\r\n      this.tempSelect = []; // eslint-disable-line no-debugger\r\n      let group1 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (x) => x.tagheader == item.tagheader\r\n      );\r\n      if (tagFilter.length == 0) return;\r\n      var tag2Filter = tagFilter[0].group1.filter(\r\n        (x) => x.group1name == item.group1\r\n      );\r\n      if (tag2Filter.length == 0) return;\r\n      var tag3Filter = tag2Filter[0].group2.filter(\r\n        (x) => x.group2name == item.group2\r\n      );\r\n      if (tag3Filter.length != 0) {\r\n        tag3Filter[0].group3.forEach((element) => {\r\n          group1.push(element);\r\n        });\r\n      }\r\n      this.tempSelect = group1;\r\n    },\r\n    getGroup1Items(item) {\r\n      let group1 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter((x) => x.tagheader == item);\r\n      tagFilter[0].group1.forEach((element) => {\r\n        group1.push(element.group1name);\r\n      });\r\n\r\n      this.tempSelect = group1;\r\n    },\r\n    // eslint-disable-next-line no-unused-vars\r\n    async getTaggingTreeData(id) {\r\n      try {\r\n        var res = await this.$apiService.get(`/taggingtree/bycompany/1`);\r\n        if (res && res.status === 200) {\r\n          this.taggingTreeData = res.data;\r\n          this.dataImported = true;\r\n          await this.fillTaggingTreeData(res.data);\r\n\r\n          if (res.data.status === \"error\") {\r\n            console.log(\"error\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n    xmlFileChanged(file) {\r\n      this.xmlFile = file;\r\n    },\r\n    async fillTaggingTreeData(data) {\r\n      const allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      data.forEach((x) => {\r\n        let group1 = [];\r\n\r\n        var tagFilter = allTagHeaders.filter((row) => row.group1 == x.group1);\r\n        if (tagFilter.length === 0) {\r\n          return;\r\n        }\r\n        group1.push(tagFilter[0].group1);\r\n        if (group1.length > 0) {\r\n          let group2 = [];\r\n\r\n          if (tagFilter.length != 0) {\r\n            tagFilter[0].group2.forEach((element) => {\r\n              group2.push(element.group2name);\r\n            });\r\n            if (group2.length > 0) {\r\n              let group3 = [];\r\n              this.tempTreeGroup2Arryay.push({ id: x.id, group2: group2 });\r\n              var tag3Filter = tagFilter[0].group2.filter(\r\n                (row) => row.group2name == x.group2\r\n              );\r\n              if (tag3Filter.length != 0) {\r\n                tag3Filter[0].group3.forEach((element) => {\r\n                  group3.push(element);\r\n                });\r\n              }\r\n              if (group3.length > 0) {\r\n                this.tempTreeGroup3Arryay.push({ id: x.id, group3: group3 });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n    async fillLedgerData(data) {\r\n      const allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      data.forEach((x) => {\r\n        if (parseInt(x[\"closingbal\"]) < 0) {\r\n          x[\"drcr\"] = \"Cr\";\r\n        } else {\r\n          x[\"drcr\"] = \"Dr\";\r\n        }\r\n        //debugger // eslint-disable-line no-debugger\r\n        let group1 = [];\r\n\r\n        var tagFilter = allTagHeaders.filter((row) => row.group1 == x.group1);\r\n        if (tagFilter.length == 0) {\r\n          return;\r\n        } else {\r\n          group1.push(tagFilter[0].group1);\r\n        }\r\n\r\n        if (group1.length > 0) {\r\n          let group2 = [];\r\n          this.tempGroup1Arryay.push({ ledgerid: x.ledgerid, group1: group1 });\r\n          var tag2Filter = tagFilter.filter((row) => row.group1 == x.group1);\r\n          if (tag2Filter.length != 0) {\r\n            tag2Filter[0].group2.forEach((element) => {\r\n              group2.push(element.group2name);\r\n            });\r\n            if (group2.length > 0) {\r\n              let group3 = [];\r\n              this.tempGroup2Arryay.push({\r\n                ledgerid: x.ledgerid,\r\n                group2: group2,\r\n              });\r\n              var tag3Filter = tag2Filter[0].group2.filter(\r\n                (row) => row.group2name == x.group2\r\n              );\r\n              if (tag3Filter.length != 0) {\r\n                tag3Filter[0].group3.forEach((element) => {\r\n                  group3.push(element);\r\n                });\r\n              }\r\n              if (group3.length > 0) {\r\n                this.tempGroup3Arryay.push({\r\n                  ledgerid: x.ledgerid,\r\n                  group3: group3,\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n    async submitXml() {\r\n      await this.getAllLedgerData(this.selectedCompany);\r\n      this.showXMLDialogue = false;\r\n      let formData = new FormData();\r\n\r\n      formData.append(\"companyid\", this.selectedCompany);\r\n      formData.append(\"tallyxml\", this.xmlFile);\r\n      try {\r\n        var res = await this.$apiService.post(\r\n          \"/ledger/upload/uploadtallyxml\",\r\n          formData,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\",\r\n            },\r\n          }\r\n        );\r\n\r\n        if (res && res.status === 200) {\r\n          this.showXMLDialogue = false;\r\n          // await  this.getAllLedgerData(this.selectedCompany);\r\n\r\n          if (res.data.status === \"error\") {\r\n            console.log(\"error\");\r\n            this.showXMLDialogue = false;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        //this.showError(\"Unable to Get Company Details\");\r\n      }\r\n    },\r\n    changeLedgerGroup(id, field, value) {\r\n      for (var i in this.taggedLedgerData) {\r\n        if (this.taggedLedgerData[i].ledgerid == id) {\r\n          this.taggedLedgerData[i][field] = value;\r\n          break; //Stop this loop, we found it!\r\n        }\r\n      }\r\n    },\r\n    changeTaggingTreeGroup(id, field, value) {\r\n      for (var i in this.taggingTreeData) {\r\n        if (this.taggingTreeData[i].id == id) {\r\n          this.taggingTreeData[i][field] = value;\r\n          break; //Stop this loop, we found it!\r\n        }\r\n      }\r\n    },\r\n    filterTaggingTree(value) {\r\n      this.filteredTaggingTreeData = this.taggingTreeData.filter(\r\n        (x) => x.group1 == value\r\n      );\r\n    },\r\n    groupChanged(value, row, group) {\r\n      this.changeLedgerGroup(row.ledgerid, group, value);\r\n      console.log(this.taggedLedgerData);\r\n    },\r\n    // eslint-disable-next-line no-unused-vars\r\n    async getAllLedgerData(companyID) {\r\n      try {\r\n        var res = await this.$apiService.get(`/processing/taggedledger/${\"1\"}`);\r\n        if (res && res.status === 200) {\r\n          this.dataImported = true;\r\n          this.taggedLedgerData = res.data;\r\n          this.taggedLedgerData = this.taggedLedgerData.filter(\r\n            (x) => x.group1 == null\r\n          );\r\n          await this.fillLedgerData(res.data);\r\n\r\n          if (res.data.status === \"error\") {\r\n            console.log(\"error\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // this.showError(\"Unable to Get Company Details\");\r\n      }\r\n    },\r\n    addDocument(val) {\r\n      if (val == \"xml\") {\r\n        this.$refs.tallyUploader.$refs.input.click();\r\n      } else {\r\n        this.$refs.uploader.$refs.input.click();\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style  scoped>\r\n>>> .my-custom-dialog {\r\n  background: white !important;\r\n}\r\n\r\n.blueUline2 {\r\n  min-width: 102%;\r\n  border-top: 3px solid #03a9f4;\r\n  border-color: #0398dc !important;\r\n}\r\n.popup-allotment-title {\r\n  font-style: normal;\r\n  font-weight: 700 !important;\r\n  color: #0398dc;\r\n  margin: 20px;\r\n  text-align: initial;\r\n}\r\n.v-dialog {\r\n  background: white !important;\r\n}\r\n.topRow {\r\n  /* margin-top:40px; */\r\n}\r\n.minTop {\r\n  margin-top: 10px;\r\n}\r\n.maxTop {\r\n  margin-top: 40px;\r\n}\r\n.maxCol {\r\n  max-width: 250px;\r\n}\r\n.btn2 {\r\n  text-transform: unset !important;\r\n  height: 65px !important;\r\n  width: 250px !important;\r\n  font-weight: 500 !important;\r\n  font-size: 18px;\r\n}\r\n.marg {\r\n  margin-right: 5% !important;\r\n}\r\n.alig {\r\n  justify-content: center !important;\r\n}\r\n.btn1 {\r\n  text-transform: unset !important;\r\n  font-weight: 600;\r\n}\r\n.loginText {\r\n  font-size: 21px;\r\n  font-weight: 300;\r\n  /* line-height: 75px; */\r\n  /* margin-top:10px; */\r\n\r\n  color: rgb(0, 107, 106);\r\n  text-decoration: \"none\";\r\n  font-family: \"Roboto\";\r\n  text-align: left;\r\n  letter-spacing: 0.2;\r\n  margin-left: 15px;\r\n}\r\n</style>\r\n\r\n"],"sourceRoot":"src/components"}]}