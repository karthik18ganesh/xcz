{"remainingRequest":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\src\\components\\TaggingLanding.vue?vue&type=style&index=0&id=586c213a&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\src\\components\\TaggingLanding.vue","mtime":1634208004280},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KPj4+IC5teS1jdXN0b20tZGlhbG9nIHsNCiAgYmFja2dyb3VuZDogd2hpdGUgIWltcG9ydGFudDsNCn0NCg0KLmJsdWVVbGluZTIgew0KICBtaW4td2lkdGg6IDEwMiU7DQogIGJvcmRlci10b3A6IDNweCBzb2xpZCAjMDNhOWY0Ow0KICBib3JkZXItY29sb3I6ICMwMzk4ZGMgIWltcG9ydGFudDsNCn0NCi5wb3B1cC1hbGxvdG1lbnQtdGl0bGUgew0KICBmb250LXN0eWxlOiBub3JtYWw7DQogIGZvbnQtd2VpZ2h0OiA3MDAgIWltcG9ydGFudDsNCiAgY29sb3I6ICMwMzk4ZGM7DQogIG1hcmdpbjogMjBweDsNCiAgdGV4dC1hbGlnbjogaW5pdGlhbDsNCn0NCi52LWRpYWxvZyB7DQogIGJhY2tncm91bmQ6IHdoaXRlICFpbXBvcnRhbnQ7DQp9DQoudG9wUm93IHsNCiAgLyogbWFyZ2luLXRvcDo0MHB4OyAqLw0KfQ0KLm1pblRvcCB7DQogIG1hcmdpbi10b3A6IDEwcHg7DQp9DQoubWF4VG9wIHsNCiAgbWFyZ2luLXRvcDogNDBweDsNCn0NCi5tYXhDb2wgew0KICBtYXgtd2lkdGg6IDI1MHB4Ow0KfQ0KLmJ0bjIgew0KICB0ZXh0LXRyYW5zZm9ybTogdW5zZXQgIWltcG9ydGFudDsNCiAgaGVpZ2h0OiA2NXB4ICFpbXBvcnRhbnQ7DQogIHdpZHRoOiAyNTBweCAhaW1wb3J0YW50Ow0KICBmb250LXdlaWdodDogNTAwICFpbXBvcnRhbnQ7DQogIGZvbnQtc2l6ZTogMThweDsNCn0NCi5tYXJnIHsNCiAgbWFyZ2luLXJpZ2h0OiA1JSAhaW1wb3J0YW50Ow0KfQ0KLmFsaWcgew0KICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50Ow0KfQ0KLmJ0bjEgew0KICB0ZXh0LXRyYW5zZm9ybTogdW5zZXQgIWltcG9ydGFudDsNCiAgZm9udC13ZWlnaHQ6IDYwMDsNCn0NCi5sb2dpblRleHQgew0KICBmb250LXNpemU6IDIxcHg7DQogIGZvbnQtd2VpZ2h0OiAzMDA7DQogIC8qIGxpbmUtaGVpZ2h0OiA3NXB4OyAqLw0KICAvKiBtYXJnaW4tdG9wOjEwcHg7ICovDQoNCiAgY29sb3I6IHJnYigwLCAxMDcsIDEwNik7DQogIHRleHQtZGVjb3JhdGlvbjogIm5vbmUiOw0KICBmb250LWZhbWlseTogIlJvYm90byI7DQogIHRleHQtYWxpZ246IGxlZnQ7DQogIGxldHRlci1zcGFjaW5nOiAwLjI7DQogIG1hcmdpbi1sZWZ0OiAxNXB4Ow0KfQ0K"},{"version":3,"sources":["TaggingLanding.vue"],"names":[],"mappingsk5BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TaggingLanding.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <v-container class=\"mainDiv\" style=\"margin-top: 50px\">\r\n    <v-dialog\r\n      content-class=\"my-custom-dialog\"\r\n      v-model=\"tallyIntegrationDialog\"\r\n      width=\"75vw\"\r\n      transition=\"dialog-bottom-transition\"\r\n    >\r\n    <div style=\"height:75vh;width:98%\">\r\n      <h1\r\n        class=\"text-h5 lighten-2 popup-allotment-title\"\r\n        style=\"font-size: 20px !important\"\r\n      >\r\n      STEPS TO Integrate\r\n      </h1>\r\n      <v-divider class=\"blueUline2\"></v-divider>\r\n      <div style=\"margin: 15px 0px;\">Because of Browser securities Issues ,we cant directly access the local tally system to import Data from it. </div>\r\n    <div style=\"margin: 15px 0px;\">Please follow the below two step to achive the Local tally integration</div>\r\n    <v-row>\r\n      <v-col xs5 style=\"height: 50vh;margin-left: 20px;margin-top: 10px;\">\r\n        <img src=\"https://www.keycdn.com/img/support/cors.png\" width=\"100%\" height=\"100%\" alt=\"no image found\"/>\r\n        </v-col>\r\n    <v-col xs6 style=\"display: flex;flex-direction: column;justify-content: center;text-align: start;\">\r\n      <div style=\"margin: 10px;margin-left: 50px;\">Step 1: Add the below extension in your browser</div>\r\n      <div style=\"margin: 10px;margin-bottom: 50px;margin-left: 50px;\"><a target=\"_blank\" href=\"https://chrome.google.com/webstore/detail/cors-unblock/lfhmikememgdcahcdlaciloancbhjino\">Tally Browser Extension</a></div>\r\n      <div style=\"margin: 10px;margin-left: 50px;\">Step 2: Download and open the file to import from tally </div>\r\n      <div style=\"margin: 10px;margin-left: 50px;cursor: pointer;\" @click=\"downLoadFile\"><p style=\"text-decoration-line: underline;color: #1976d2;cursor: pointer;\" >Download tally integration file</p></div>\r\n      <div style=\"margin: 10px;margin-left: 50px;cursor: pointer;\" @click=\"useExistingFile\"><v-btn\r\n            class=\"ma-2\"\r\n            style=\"\r\n              background-color: #03a9f4 !important;\r\n    border-color: #03a9f4;\r\n    padding: 2px 0px;\r\n    width: 38%;\r\n    margin: 0px !important;\r\n    margin-top: -9px !important;\r\n    color: #fff;\r\n            \"\r\n            color=\"#03a9f4\"\r\n          >\r\n           Or Use Existing file\r\n          </v-btn></div>\r\n    </v-col>        \r\n    </v-row>\r\n    </div>\r\n    </v-dialog>\r\n    <v-row>\r\n      <v-col cols=\"12\">\r\n        <v-row\r\n          class=\"topRow alig\"\r\n          v-bind:class=\"{\r\n            minTop: activeUploadOption == 'tally',\r\n            maxTop: activeUploadOption != 'tally',\r\n          }\"\r\n        >\r\n          <v-col cols=\"5\" class=\"ma-1 marg\" align=\"right\">\r\n            <v-btn\r\n              large\r\n              @click=\"UploadOptionSelected('tally')\"\r\n              color=\"white\"\r\n              class=\"btn1 btn2 pa-6\"\r\n              :style=\"{\r\n                visibility: uploadOptionSelected ? 'hidden' : 'visible',\r\n              }\"\r\n              >Import from Tally</v-btn\r\n            >\r\n          </v-col>\r\n          <v-col align=\"left\" cols=\"5\" class=\"ma-1\">\r\n            <v-btn\r\n              large\r\n              @click=\"UploadOptionSelected('excel')\"\r\n              color=\"white\"\r\n              class=\"btn1 btn2 pa-6\"\r\n              :style=\"{\r\n                visibility: uploadOptionSelected ? 'hidden' : 'visible',\r\n              }\"\r\n              >Import from Excel</v-btn\r\n            >\r\n          </v-col>\r\n        </v-row>\r\n      </v-col>\r\n\r\n      <v-col cols=\"6\">\r\n        <img\r\n          src=\"../assets/sukuman.png\"\r\n          alt=\"sukman\"\r\n          height=\"400\"\r\n          width=\"390\"\r\n          class=\"img-logo\"\r\n        />\r\n      </v-col>\r\n      <v-col cols=\"6\">\r\n        <v-row v-if=\"activeUploadOption == 'tally'\">\r\n          <v-col\r\n            align=\"left\"\r\n            style=\"padding-left: 0px; padding-bottom: 20px\"\r\n            cols=\"12\"\r\n          >\r\n            <h4 style=\"margin-bottom: 10px\">\r\n              <u style=\"text-decoration: none; margin: 3px\">\r\n                Import From Tally</u\r\n              >\r\n            </h4>\r\n          </v-col>\r\n          <v-col cols=\"12\" class=\"pa-1\">\r\n            <v-select\r\n              dense\r\n              outlined\r\n              label=\"Name of the Organization\"\r\n              v-model=\"selectedCompany\"\r\n              :items=\"companies\"\r\n              item-text=\"name\"\r\n              item-value=\"id\"\r\n            ></v-select>\r\n          </v-col>\r\n          <v-col cols=\"6\" class=\"LabelText pa-1\">\r\n            <v-menu\r\n              :close-on-content-click=\"true\"\r\n              :nudge-right=\"40\"\r\n              transition=\"scale-transition\"\r\n              offset-y\r\n            >\r\n              <template v-slot:activator=\"{ on, attrs }\">\r\n                <v-text-field\r\n                  autocomplete=\"off\"\r\n                  :value=\"fromPeriod\"\r\n                  outlined\r\n                  style=\"width: 95%\"\r\n                  label=\"Period From\"\r\n                  append-icon=\"mdi-calendar\"\r\n                  readonly\r\n                  dense\r\n                  v-bind=\"attrs\"\r\n                  v-on=\"on\"\r\n                ></v-text-field>\r\n              </template>\r\n              <v-date-picker\r\n                color=\"#006B6A\"\r\n                label=\"From Period\"\r\n                v-model=\"fromPeriod\"\r\n                outlined\r\n                dense\r\n              ></v-date-picker>\r\n            </v-menu>\r\n          </v-col>\r\n          <v-col cols=\"6\" class=\"LabelText pa-1\">\r\n            <v-menu\r\n              :close-on-content-click=\"true\"\r\n              :nudge-right=\"40\"\r\n              transition=\"scale-transition\"\r\n              offset-y\r\n            >\r\n              <template v-slot:activator=\"{ on, attrs }\">\r\n                <v-text-field\r\n                  autocomplete=\"off\"\r\n                  :value=\"fromPeriod\"\r\n                  outlined\r\n                  label=\"Period To\"\r\n                  style=\"width: 95%; float: right\"\r\n                  append-icon=\"mdi-calendar\"\r\n                  readonly\r\n                  dense\r\n                  v-bind=\"attrs\"\r\n                  v-on=\"on\"\r\n                ></v-text-field>\r\n              </template>\r\n              <v-date-picker\r\n                color=\"#006B6A\"\r\n                label=\"From Period\"\r\n                v-model=\"fromPeriod\"\r\n                outlined\r\n                dense\r\n              ></v-date-picker>\r\n            </v-menu>\r\n          </v-col>\r\n          <v-col cols=\"6\" class=\"pa-1\">\r\n            <v-select\r\n              style=\"width: 95%\"\r\n              dense\r\n              outlined\r\n              label=\"Import Level\"\r\n              v-model=\"selectedImportLevel\"\r\n              :items=\"['Closing Balance', 'Opening and Closing Balance']\"\r\n            ></v-select>\r\n          </v-col>\r\n          <v-col cols=\"12\" align=\"right\">\r\n            <v-btn class=\"primary ma-2\" color=\"white\" @click=\"importFromTally\">\r\n              Import\r\n            </v-btn>\r\n            <v-btn class=\"ma-2\" outlined color=\"primary\" @click=\"cancelImport\">\r\n              Cancel\r\n            </v-btn>\r\n          </v-col>\r\n        </v-row>\r\n      </v-col>\r\n    </v-row>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport store from \"../store\";\r\nimport moment from \"moment\";\r\n// var convert = require('xml-js');\r\nexport default {\r\n  name: \"TaggingHome\",\r\n  data() {\r\n    return {\r\n      tallyIntegrationDialog:false,\r\n      activeUploadOption: \"\",\r\n      uploadOptionSelected: false,\r\n      fromPeriod: \"\",\r\n      selectedCompany: \"\",\r\n      taggedLedgerData: [],\r\n      companies: [\"BSY Private Limited\"],\r\n    };\r\n  },\r\n  async mounted() {\r\n    this.allTagHeaders = this.$store.getters.tagHeaders;\r\n   },\r\n\r\n  methods: {\r\n    async checkStatus(id) {\r\n      var res = await this.$apiService.post(\"/taggingUplStatus/get\", {\r\n        taggingUplStatusId: id.data,\r\n        companyId: 21,\r\n      });\r\n      // console.log(res.data.data)\r\n      store.commit(\"SET_IS_LOADING\", true);\r\n      if (res && res.data.data) {\r\n        clearInterval(this.myVar);\r\n        store.commit(\"SET_IS_LOADING\", false);\r\n        this.$router.push({ path: \"/taggingdisplay\" });\r\n      }\r\n    },\r\n    async importFromTally() {\r\n      this.$router.push({ path: \"/taggingdisplay\" });\r\n      //--\r\n      //  store.commit('SET_IS_LOADING', true);\r\n      //create entry in status table\r\n      // var statusPayload ={\"companyId\": \"21\",\"period_from\": \"2020-08-07\",\"period_to\": \"2021-08-07\"};\r\n      // var res = await this.$apiService.post(\"/taggingUplStatus\", statusPayload);\r\n      //   if (res && res.status === 200) {\r\n      //     store.commit('SET_IS_LOADING', true);\r\n      //     this.myVar = setInterval(()=>this.checkStatus(res.data), 3000);\r\n      //   }\r\n      // fetch(\"https://jsonip.com/\").then(val=>val.json()).then(async val=>{\r\n      // console.log(val,\"suc\",{\"id\":val.ip});\r\n      //    var res = await this.$apiService.post(\"/tally/getcompany\", {\"ip\":val.ip});\r\n      //   if (res && res.status === 200) {\r\n      //     console.log(res.data.data.elements[0].elements[0].elements[0].elements,\"list of comapnies\")\r\n      //   }\r\n\r\n      // }\r\n      // ).catch(val=>console.log(val,\"failed\"))\r\n      // var res = await this.$apiService.post(\"/tally/getcompany\", statusPayload);\r\n      // if (res && res.status === 200) {\r\n      //   store.commit('SET_IS_LOADING', true);\r\n      //   this.myVar = setInterval(()=>this.checkStatus(res.data), 3000);\r\n      // }\r\n      //--\r\n      // var parentArray=[];\r\n      //   try{\r\n      //       var res = await this.$apiService.get(`/processing/taggedledger/${'1'}`);\r\n      //       if(res&&res.status === 200) {\r\n\r\n      //           this.taggedLedgerData=res.data;\r\n      //           if(res.data.length>0){\r\n      //              let unique = [...new Set(res.data.map(item => item.parent))];\r\n      //              unique.forEach(row=>{\r\n      //                parentArray.push({name:row,validate:false})\r\n      //              })\r\n\r\n      //              this.$router.push({name: 'TaggingDsiplay', params : { displayData: res.data,parent:parentArray}});\r\n\r\n      //           }\r\n\r\n      //         if (res.data.status === \"error\") {\r\n      //   console.log(\"error\");\r\n      //         }\r\n\r\n      //   }\r\n\r\n      //   }\r\n      //   catch(error) {\r\n      //    // this.showError(\"Unable to Get Company Details\");\r\n      //      }\r\n    },\r\n    cancelImport() {\r\n      this.uploadOptionSelected = false;\r\n      this.activeUploadOption = \"\";\r\n    },\r\n    async startListerning(value){\r\n      store.commit('SET_IS_LOADING', true); \r\n      console.log(value,\"val1\")\r\n      var watch = setInterval(async () => {\r\n        fetch(`http://localhost:8080/tallyintegration/register/get?registerId=${value.data.registerId}`).then(res=>res.json()).then(async res=>{\r\n      if (res ) {\r\n        console.log(res);\r\n        if(res.data){\r\n          clearInterval(watch);\r\n        store.commit('SET_IS_LOADING', true); \r\n        var idf = JSON.parse(sessionStorage.getItem(\"fina\")).id;\r\n            //get reporting periodid and company type\r\n        var resRequiredDetails = await this.$apiService.get('ledger/requiredvalues?financialId='+idf);\r\n        if(resRequiredDetails&&resRequiredDetails.status === 200) {  \r\n          sessionStorage.setItem(\"reportId\",resRequiredDetails.data.data.reportingPeriodData);\r\n          sessionStorage.setItem(\"companyType\",resRequiredDetails.data.data.companyType);\r\n          sessionStorage.setItem(\"taggingLevel\",resRequiredDetails.data.data.taggingLevel);\r\n          setTimeout(() => {\r\n            this.$router.push({ path: \"/taggingdisplay\" });\r\n          }, 100);  \r\n        }\r\n        }\r\n      }    \r\n      else{\r\n        clearInterval(watch);\r\n      }\r\n        })\r\n\r\n      }, 10000);\r\n    },\r\n    async downLoadFile(){\r\n    var time = moment().valueOf();\r\n      // fetch('http://13.234.27.65:8080/index?time='+time)\r\n      fetch('http://localhost:8080/tallyintegration?time='+time)\r\n  .then(resp => resp.blob())\r\n  .then(blob => {\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.style.display = 'none';\r\n    a.href = url;\r\n    // the filename you want\r\n    a.download = 'tallyIntegration.html';\r\n    // a.target = \"_blank\";\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  })\r\n  .catch(() => alert('try again..'));\r\n  this.tallyIntegrationDialog = false;\r\n  store.commit('SET_IS_LOADING', true); \r\n  var res = await this.$apiService.post(`/tallyintegration/register`,{userId:JSON.parse(sessionStorage.userDetails).data.id,companyId:JSON.parse(sessionStorage.fina).company_id,financialId:JSON.parse(sessionStorage.fina).id,otherDetails:JSON.parse(sessionStorage.fina)});\r\n      if (res && res.status === 200) {\r\n        this.startListerning(res);\r\n      }\r\n    },\r\n   async useExistingFile(){\r\n     this.tallyIntegrationDialog = false;\r\n        store.commit('SET_IS_LOADING', true); \r\n  var res = await this.$apiService.post(`/tallyintegration/register`,{userId:JSON.parse(sessionStorage.userDetails).data.id,companyId:JSON.parse(sessionStorage.fina).company_id,financialId:JSON.parse(sessionStorage.fina).id,otherDetails:JSON.parse(sessionStorage.fina)});\r\n      if (res && res.status === 200) {\r\n        this.startListerning(res);\r\n      }\r\n    },\r\n    UploadOptionSelected(val) {\r\n      console.log(val,\"val\")\r\n      // this.uploadOptionSelected = true;\r\n      // this.activeUploadOption = val;\r\n      this.tallyIntegrationDialog = true;\r\n  //     if(val == \"tally\"){\r\n  //             var time = moment().valueOf();\r\n  //     // fetch('http://13.234.27.65:8080/index?time='+time)\r\n  //     fetch('http://localhost:8080/index?time='+time)\r\n  // .then(resp => resp.blob())\r\n  // .then(blob => {\r\n  //   const url = window.URL.createObjectURL(blob);\r\n  //   const a = document.createElement('a');\r\n  //   a.style.display = 'none';\r\n  //   a.href = url;\r\n  //   // the filename you want\r\n  //   a.download = 'tallyIntegration.html';\r\n  //   // a.target = \"_blank\";\r\n  //   document.body.appendChild(a);\r\n  //   a.click();\r\n  //   window.URL.revokeObjectURL(url);\r\n  // })\r\n  // .catch(() => alert('oh no!'));\r\n  //     }\r\n    },\r\n    async saveAllLedgers() {\r\n      var res = await this.$apiService.put(\r\n        `processing/tagging/update`,\r\n        this.taggedLedgerData\r\n      );\r\n      if (res && res.status === 200) {\r\n        this.showSuccess(res.data.message);\r\n        this.$refs.table.refresh();\r\n        await this.getAllLedgerData(this.selectedCompany);\r\n        await this.getTaggingTreeData();\r\n        console.log(\"success\");\r\n      }\r\n      if (res.data.status === \"error\") {\r\n        console.log(\"error\");\r\n      }\r\n    },\r\n    async onTagTreeSubmit(data) {\r\n      console.log(data);\r\n      this.$refs.treeTable.refresh();\r\n      this.filterTaggingTree(this.selectedTag);\r\n    },\r\n    async onLedgerSubmit(data) {\r\n      let putData = [];\r\n      putData.push(data);\r\n      var res = await this.$apiService.put(\r\n        `processing/tagging/update`,\r\n        putData\r\n      );\r\n      if (res && res.status === 200) {\r\n        this.showSuccess(res.data.message);\r\n        this.$refs.table.refresh();\r\n        await this.getAllLedgerData(this.selectedCompany);\r\n        await this.getTaggingTreeData();\r\n        console.log(\"success\");\r\n      }\r\n      if (res.data.status === \"error\") {\r\n        console.log(\"error\");\r\n      }\r\n      console.log(data);\r\n    },\r\n    ledgerGroup1Changed(value) {\r\n      let group2 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (x) => x.group1 == value.group1\r\n      );\r\n      if (tagFilter.length == 0) return;\r\n\r\n      if (tagFilter.length != 0) {\r\n        tagFilter[0].group2.forEach((element) => {\r\n          group2.push(element.group2name);\r\n        });\r\n      }\r\n      if (group2.length > 0) {\r\n        if (\r\n          this.tempGroup2Arryay.filter((x) => x.ledgerid == value.ledgerid)\r\n            .length == 0\r\n        ) {\r\n          this.tempGroup2Arryay.push({\r\n            ledgerid: value.ledgerid,\r\n            group2: group2,\r\n          });\r\n        } else {\r\n          this.tempGroup2Arryay.filter(\r\n            (x) => x.ledgerid == value.ledgerid\r\n          )[0].group2 = group2;\r\n          this.taggedLedgerData.filter(\r\n            (x) => x.ledgerid == value.ledgerid\r\n          )[0].group2 = null;\r\n          //console.log(this.taggedLedgerData.filter(x=>x.ledgerid==value.ledgerid)[0],\"shum\")\r\n        }\r\n      }\r\n      this.$refs.table.refresh();\r\n    },\r\n\r\n    ledgerGroup2Changed(item) {\r\n      debugger; // eslint-disable-line no-debugger\r\n      let group3 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter((x) => x.group1 == item.group1);\r\n      if (tagFilter.length == 0) return;\r\n\r\n      var tag3Filter = tagFilter[0].group2.filter(\r\n        (x) => x.group2name == item.group2\r\n      );\r\n      if (tag3Filter.length != 0) {\r\n        tag3Filter[0].group3.forEach((element) => {\r\n          group3.push(element);\r\n        });\r\n      }\r\n      if (group3.length > 0) {\r\n        if (\r\n          this.tempGroup3Arryay.filter((x) => x.ledgerid == item.ledgerid)\r\n            .length == 0\r\n        ) {\r\n          this.tempGroup3Arryay.push({\r\n            ledgerid: item.ledgerid,\r\n            group3: group3,\r\n          });\r\n        } else {\r\n          this.tempGroup3Arryay.filter(\r\n            (x) => x.ledgerid == item.ledgerid\r\n          )[0].group3 = group3;\r\n          this.taggedLedgerData.filter(\r\n            (x) => x.ledgerid == item.ledgerid\r\n          )[0].group3 = null;\r\n          //console.log(this.taggedLedgerData.filter(x=>x.ledgerid==value.ledgerid)[0],\"shum\")\r\n        }\r\n      }\r\n      this.$refs.table.refresh();\r\n    },\r\n    ledgerTagChanged(value) {\r\n      console.log(value, \"ledgerTagChanged\");\r\n      let group1 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (x) => x.tagheader == value.item.taggingheader\r\n      );\r\n      tagFilter[0].group1.forEach((element) => {\r\n        group1.push(element.group1name);\r\n      });\r\n      if (group1.length > 0) {\r\n        if (\r\n          this.tempGroup1Arryay.filter((x) => x.ledgerid == value.item.ledgerid)\r\n            .length == 0\r\n        ) {\r\n          this.tempGroup1Arryay.push({\r\n            ledgerid: value.item.ledgerid,\r\n            group1: group1,\r\n          });\r\n        } else {\r\n          this.tempGroup1Arryay.filter(\r\n            (x) => x.ledgerid == value.item.ledgerid\r\n          )[0].group1 = group1;\r\n          this.taggedLedgerData.filter(\r\n            (x) => x.ledgerid == value.item.ledgerid\r\n          )[0].group1 = null;\r\n          console.log(\r\n            this.taggedLedgerData.filter(\r\n              (x) => x.ledgerid == value.item.ledgerid\r\n            )[0],\r\n            \"shum\"\r\n          );\r\n        }\r\n\r\n        this.$refs.table.refresh();\r\n      }\r\n      console.log(\r\n        this.tempGroup1Arryay.filter(\r\n          (x) => x.ledgerid == value.item.ledgerid\r\n        )[0].group1,\r\n        \"s\"\r\n      );\r\n    },\r\n    tagTreeGroup2Changed(item) {\r\n      let group3 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (row) => row.group1 == item.group1\r\n      );\r\n      if (tagFilter.length == 0) return;\r\n\r\n      var tag3Filter = tagFilter[0].group2.filter(\r\n        (x) => x.group2name == item.group2\r\n      );\r\n      if (tag3Filter.length != 0) {\r\n        tag3Filter[0].group3.forEach((element) => {\r\n          group3.push(element);\r\n        });\r\n      }\r\n      if (group3.length > 0) {\r\n        if (\r\n          this.tempTreeGroup3Arryay.filter((x) => x.id == item.id).length == 0\r\n        ) {\r\n          this.tempTreeGroup3Arryay.push({ id: item.id, group3: group3 });\r\n        } else {\r\n          this.tempTreeGroup3Arryay.filter((x) => x.id == item.id)[0].group3 =\r\n            group3;\r\n          this.taggingTreeData.filter((x) => x.id == item.id)[0].group3 = null;\r\n          //console.log(this.taggedLedgerData.filter(x=>x.ledgerid==value.ledgerid)[0],\"shum\")\r\n        }\r\n      }\r\n      this.$refs.table.refresh();\r\n    },\r\n    tagTreeGroup1Changed(value) {\r\n      let group2 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (row) => row.group1 == value.group1\r\n      );\r\n      if (tagFilter.length == 0) return;\r\n\r\n      if (tagFilter.length != 0) {\r\n        tagFilter[0].group2.forEach((element) => {\r\n          group2.push(element.group2name);\r\n        });\r\n      }\r\n      if (group2.length > 0) {\r\n        if (\r\n          this.tempTreeGroup2Arryay.filter((x) => x.id == value.id).length == 0\r\n        ) {\r\n          this.tempTreeGroup2Arryay.push({ id: value.id, group2: group2 });\r\n        } else {\r\n          this.tempTreeGroup2Arryay.filter((x) => x.id == value.id)[0].group2 =\r\n            group2;\r\n          this.taggingTreeData.filter((x) => x.id == value.id)[0].group2 = null;\r\n          this.taggingTreeData.filter((x) => x.id == value.id)[0].group3 = null;\r\n          //console.log(this.taggedLedgerData.filter(x=>x.ledgerid==value.ledgerid)[0],\"shum\")\r\n        }\r\n      }\r\n    },\r\n    tagTreeTagChanged(value) {\r\n      let group1 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (x) => x.tagheader == value.item.tagheader\r\n      );\r\n      tagFilter[0].group1.forEach((element) => {\r\n        group1.push(element.group1name);\r\n      });\r\n      if (group1.length > 0) {\r\n        if (\r\n          this.tempTreeGroup1Arryay.filter((row) => row.id == value.item.id)\r\n            .length == 0\r\n        ) {\r\n          this.tempTreeGroup1Arryay.push({ id: value.item.id, group1: group1 });\r\n        } else {\r\n          this.tempTreeGroup1Arryay.filter(\r\n            (x) => x.ledgerid == value.item.ledgerid\r\n          )[0].group1 = group1;\r\n          this.taggingTreeData.filter((x) => x.id == value.item.id)[0].group1 =\r\n            null;\r\n          this.taggingTreeData.filter((x) => x.id == value.item.id)[0].group2 =\r\n            null;\r\n          this.taggingTreeData.filter((x) => x.id == value.item.id)[0].group3 =\r\n            null;\r\n          //console.log(this.taggedLedgerData.filter(x=>x.ledgerid==value.item.ledgerid)[0],\"shum\")\r\n        }\r\n\r\n        this.$refs.table.refresh();\r\n      }\r\n      console.log(\r\n        this.tempGroup1Arryay.filter(\r\n          (x) => x.ledgerid == value.item.ledgerid\r\n        )[0].group1,\r\n        \"s\"\r\n      );\r\n    },\r\n    async sendValue(value) {\r\n      if (value === \"all\") {\r\n        this.tagSelected = false;\r\n        this.selectedTag = \"\";\r\n      } else {\r\n        this.tagSelected = true;\r\n        if (this.taggingTreeData.length == 0) {\r\n          await this.getTaggingTreeData();\r\n          this.filterTaggingTree(value);\r\n          this.selectedTag = value;\r\n        } else {\r\n          this.filterTaggingTree(value);\r\n          this.selectedTag = value;\r\n        }\r\n      }\r\n    },\r\n    checkip(ip) {\r\n      console.log(ip, \"checkip\");\r\n    },\r\n    getGroup2Items(item) {\r\n      this.tempSelect = []; // eslint-disable-line no-debugger\r\n      let group1 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (x) => x.tagheader == item.tagheader\r\n      );\r\n      if (tagFilter.length == 0) return;\r\n      var tag2Filter = tagFilter[0].group1.filter(\r\n        (x) => x.group1name == item.group1\r\n      );\r\n      if (tag2Filter.length != 0) {\r\n        tag2Filter[0].group2.forEach((element) => {\r\n          group1.push(element.group2name);\r\n        });\r\n      }\r\n\r\n      this.tempSelect = group1;\r\n    },\r\n    getGroup3Items(item) {\r\n      this.tempSelect = []; // eslint-disable-line no-debugger\r\n      let group1 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter(\r\n        (x) => x.tagheader == item.tagheader\r\n      );\r\n      if (tagFilter.length == 0) return;\r\n      var tag2Filter = tagFilter[0].group1.filter(\r\n        (x) => x.group1name == item.group1\r\n      );\r\n      if (tag2Filter.length == 0) return;\r\n      var tag3Filter = tag2Filter[0].group2.filter(\r\n        (x) => x.group2name == item.group2\r\n      );\r\n      if (tag3Filter.length != 0) {\r\n        tag3Filter[0].group3.forEach((element) => {\r\n          group1.push(element);\r\n        });\r\n      }\r\n      this.tempSelect = group1;\r\n    },\r\n    getGroup1Items(item) {\r\n      let group1 = [];\r\n      this.allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      var tagFilter = this.allTagHeaders.filter((x) => x.tagheader == item);\r\n      tagFilter[0].group1.forEach((element) => {\r\n        group1.push(element.group1name);\r\n      });\r\n\r\n      this.tempSelect = group1;\r\n    },\r\n    // eslint-disable-next-line no-unused-vars\r\n    async getTaggingTreeData(id) {\r\n      try {\r\n        var res = await this.$apiService.get(`/taggingtree/bycompany/1`);\r\n        if (res && res.status === 200) {\r\n          this.taggingTreeData = res.data;\r\n          this.dataImported = true;\r\n          await this.fillTaggingTreeData(res.data);\r\n\r\n          if (res.data.status === \"error\") {\r\n            console.log(\"error\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n    xmlFileChanged(file) {\r\n      this.xmlFile = file;\r\n    },\r\n    async fillTaggingTreeData(data) {\r\n      const allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      data.forEach((x) => {\r\n        let group1 = [];\r\n\r\n        var tagFilter = allTagHeaders.filter((row) => row.group1 == x.group1);\r\n        if (tagFilter.length === 0) {\r\n          return;\r\n        }\r\n        group1.push(tagFilter[0].group1);\r\n        if (group1.length > 0) {\r\n          let group2 = [];\r\n\r\n          if (tagFilter.length != 0) {\r\n            tagFilter[0].group2.forEach((element) => {\r\n              group2.push(element.group2name);\r\n            });\r\n            if (group2.length > 0) {\r\n              let group3 = [];\r\n              this.tempTreeGroup2Arryay.push({ id: x.id, group2: group2 });\r\n              var tag3Filter = tagFilter[0].group2.filter(\r\n                (row) => row.group2name == x.group2\r\n              );\r\n              if (tag3Filter.length != 0) {\r\n                tag3Filter[0].group3.forEach((element) => {\r\n                  group3.push(element);\r\n                });\r\n              }\r\n              if (group3.length > 0) {\r\n                this.tempTreeGroup3Arryay.push({ id: x.id, group3: group3 });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n    async fillLedgerData(data) {\r\n      const allTagHeaders = JSON.parse(\r\n        JSON.stringify(this.$store.getters.tagHeaders)\r\n      );\r\n      data.forEach((x) => {\r\n        if (parseInt(x[\"closingbal\"]) < 0) {\r\n          x[\"drcr\"] = \"Cr\";\r\n        } else {\r\n          x[\"drcr\"] = \"Dr\";\r\n        }\r\n        //debugger // eslint-disable-line no-debugger\r\n        let group1 = [];\r\n\r\n        var tagFilter = allTagHeaders.filter((row) => row.group1 == x.group1);\r\n        if (tagFilter.length == 0) {\r\n          return;\r\n        } else {\r\n          group1.push(tagFilter[0].group1);\r\n        }\r\n\r\n        if (group1.length > 0) {\r\n          let group2 = [];\r\n          this.tempGroup1Arryay.push({ ledgerid: x.ledgerid, group1: group1 });\r\n          var tag2Filter = tagFilter.filter((row) => row.group1 == x.group1);\r\n          if (tag2Filter.length != 0) {\r\n            tag2Filter[0].group2.forEach((element) => {\r\n              group2.push(element.group2name);\r\n            });\r\n            if (group2.length > 0) {\r\n              let group3 = [];\r\n              this.tempGroup2Arryay.push({\r\n                ledgerid: x.ledgerid,\r\n                group2: group2,\r\n              });\r\n              var tag3Filter = tag2Filter[0].group2.filter(\r\n                (row) => row.group2name == x.group2\r\n              );\r\n              if (tag3Filter.length != 0) {\r\n                tag3Filter[0].group3.forEach((element) => {\r\n                  group3.push(element);\r\n                });\r\n              }\r\n              if (group3.length > 0) {\r\n                this.tempGroup3Arryay.push({\r\n                  ledgerid: x.ledgerid,\r\n                  group3: group3,\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n    async submitXml() {\r\n      await this.getAllLedgerData(this.selectedCompany);\r\n      this.showXMLDialogue = false;\r\n      let formData = new FormData();\r\n\r\n      formData.append(\"companyid\", this.selectedCompany);\r\n      formData.append(\"tallyxml\", this.xmlFile);\r\n      try {\r\n        var res = await this.$apiService.post(\r\n          \"/ledger/upload/uploadtallyxml\",\r\n          formData,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\",\r\n            },\r\n          }\r\n        );\r\n\r\n        if (res && res.status === 200) {\r\n          this.showXMLDialogue = false;\r\n          // await  this.getAllLedgerData(this.selectedCompany);\r\n\r\n          if (res.data.status === \"error\") {\r\n            console.log(\"error\");\r\n            this.showXMLDialogue = false;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        //this.showError(\"Unable to Get Company Details\");\r\n      }\r\n    },\r\n    changeLedgerGroup(id, field, value) {\r\n      for (var i in this.taggedLedgerData) {\r\n        if (this.taggedLedgerData[i].ledgerid == id) {\r\n          this.taggedLedgerData[i][field] = value;\r\n          break; //Stop this loop, we found it!\r\n        }\r\n      }\r\n    },\r\n    changeTaggingTreeGroup(id, field, value) {\r\n      for (var i in this.taggingTreeData) {\r\n        if (this.taggingTreeData[i].id == id) {\r\n          this.taggingTreeData[i][field] = value;\r\n          break; //Stop this loop, we found it!\r\n        }\r\n      }\r\n    },\r\n    filterTaggingTree(value) {\r\n      this.filteredTaggingTreeData = this.taggingTreeData.filter(\r\n        (x) => x.group1 == value\r\n      );\r\n    },\r\n    groupChanged(value, row, group) {\r\n      this.changeLedgerGroup(row.ledgerid, group, value);\r\n      console.log(this.taggedLedgerData);\r\n    },\r\n    // eslint-disable-next-line no-unused-vars\r\n    async getAllLedgerData(companyID) {\r\n      try {\r\n        var res = await this.$apiService.get(`/processing/taggedledger/${\"1\"}`);\r\n        if (res && res.status === 200) {\r\n          this.dataImported = true;\r\n          this.taggedLedgerData = res.data;\r\n          this.taggedLedgerData = this.taggedLedgerData.filter(\r\n            (x) => x.group1 == null\r\n          );\r\n          await this.fillLedgerData(res.data);\r\n\r\n          if (res.data.status === \"error\") {\r\n            console.log(\"error\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // this.showError(\"Unable to Get Company Details\");\r\n      }\r\n    },\r\n    addDocument(val) {\r\n      if (val == \"xml\") {\r\n        this.$refs.tallyUploader.$refs.input.click();\r\n      } else {\r\n        this.$refs.uploader.$refs.input.click();\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style  scoped>\r\n>>> .my-custom-dialog {\r\n  background: white !important;\r\n}\r\n\r\n.blueUline2 {\r\n  min-width: 102%;\r\n  border-top: 3px solid #03a9f4;\r\n  border-color: #0398dc !important;\r\n}\r\n.popup-allotment-title {\r\n  font-style: normal;\r\n  font-weight: 700 !important;\r\n  color: #0398dc;\r\n  margin: 20px;\r\n  text-align: initial;\r\n}\r\n.v-dialog {\r\n  background: white !important;\r\n}\r\n.topRow {\r\n  /* margin-top:40px; */\r\n}\r\n.minTop {\r\n  margin-top: 10px;\r\n}\r\n.maxTop {\r\n  margin-top: 40px;\r\n}\r\n.maxCol {\r\n  max-width: 250px;\r\n}\r\n.btn2 {\r\n  text-transform: unset !important;\r\n  height: 65px !important;\r\n  width: 250px !important;\r\n  font-weight: 500 !important;\r\n  font-size: 18px;\r\n}\r\n.marg {\r\n  margin-right: 5% !important;\r\n}\r\n.alig {\r\n  justify-content: center !important;\r\n}\r\n.btn1 {\r\n  text-transform: unset !important;\r\n  font-weight: 600;\r\n}\r\n.loginText {\r\n  font-size: 21px;\r\n  font-weight: 300;\r\n  /* line-height: 75px; */\r\n  /* margin-top:10px; */\r\n\r\n  color: rgb(0, 107, 106);\r\n  text-decoration: \"none\";\r\n  font-family: \"Roboto\";\r\n  text-align: left;\r\n  letter-spacing: 0.2;\r\n  margin-left: 15px;\r\n}\r\n</style>\r\n\r\n"]}]}