{"remainingRequest":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\src\\components\\EntityProfile.vue?vue&type=template&id=c463ce40&scoped=true&","dependencies":[{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\src\\components\\EntityProfile.vue","mtime":1634868258740},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}