{"remainingRequest":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\src\\components\\Admin\\Privileges.vue?vue&type=template&id=7c9089f2&scoped=true&","dependencies":[{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\src\\components\\Admin\\Privileges.vue","mtime":1634206247459},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}