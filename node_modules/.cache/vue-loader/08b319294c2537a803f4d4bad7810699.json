{"remainingRequest":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\src\\components\\ManagementAdd.vue?vue&type=template&id=47c4f24b&scoped=true&","dependencies":[{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\src\\components\\ManagementAdd.vue","mtime":1634868378408},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\18kar\\Desktop\\FE bugs\\shan\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQo8ZGl2ID4NCiA8di1kaWFsb2cgY29udGVudC1jbGFzcz0ibXktY3VzdG9tLWRpYWxvZyINCiAgICAgIHYtbW9kZWw9ImFkZGl0aW9uYWxJbmZvRGlhbG9nIg0KICAgICAgd2lkdGg9IjUwMCINCiAgICAgIGhlaWdodD0iNzAwIg0KICAgICAgdHJhbnNpdGlvbj0iZGlhbG9nLWJvdHRvbS10cmFuc2l0aW9uIj4NCjxoMSBjbGFzcz0idGV4dC1oNSBsaWdodGVuLTIgcG9wdXAtYWxsb3RtZW50LXRpdGxlIiBzdHlsZT0iZm9udC1zaXplOjMwcHggIWltcG9ydGFudCI+DQogICAgICAgICAgQWRkaXRpb25hbCBJbmZvDQogICAgICAgIDwvaDE+DQo8di1kaXZpZGVyIGNsYXNzPSJibHVlVWxpbmUyIj48L3YtZGl2aWRlcj4NCjx2LWxheW91dCBzdHlsZT0iZGlzcGxheTpibG9jazttYXJnaW46NCUgMTMlIDIlIDEzJTsiPg0KICA8di10ZXh0LWZpZWxkIGF1dG9jb21wbGV0ZT0ib2ZmIiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpbnZvaWNlTnVtYmVyIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVuc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iSW52b2ljZSBOby4iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRpYWxvZy10ZXh0Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDozNzNweCINCiAgICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgYXV0b2NvbXBsZXRlPSJvZmYiIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InZlbmRvck5hbWUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZW5zZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJWZW5kb3IgTmFtZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZGlhbG9nLXRleHQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjM3M3B4Ig0KICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBhdXRvY29tcGxldGU9Im9mZiIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ic2VyaWFsTnVtYmVyIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVuc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iU2VyaWFsIE5vLiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZGlhbG9nLXRleHQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjM3M3B4Ig0KICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBhdXRvY29tcGxldGU9Im9mZiIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaWRlbnRpZmljYXRpb25OdW1iZXIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZW5zZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJBc3NldCBJZGVudGlmaWNhdGlvbiBOby4iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRpYWxvZy10ZXh0Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDozNzNweCINCiAgICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4NCiAgICAgIDx2LWxheW91dD4NCiAgICAgICAgICAgIDx2LWZsZXggeHM1IHN0eWxlPSJkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO21hcmdpbi10b3A6MSU7bWFyZ2luLXJpZ2h0OjUlIj4NCiAgICAgICAgICAgIDxwIGNsYXNzPSJ0b2dnbGUtdGV4dCI+UGh5c2ljYWxseSBJZGVudGlmaWFibGU/PC9wPg0KICAgICAgICAgICAgPC92LWZsZXg+DQogICAgICAgICAgICAgPHYtZmxleCB4czE+DQogICAgICAgICAgICAgICAgICAgIDx2LXN3aXRjaA0KICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJpZGVudGlmaWFibGUiDQogICAgICAgICAgICAgICAgICAgID4NCiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpsYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgWWVzDQogICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgIDwvdi1zd2l0Y2g+DQogICAgICAgICAgICAgICAgPC92LWZsZXg+DQogICAgICAgICAgICA8L3YtbGF5b3V0Pg0KPC92LWxheW91dD4NCjx2LWRpdmlkZXIgY2xhc3M9ImJsdWVVbGluZTIiPjwvdi1kaXZpZGVyPg0KPHYtYnRuDQogICAgICAgICAgICAgICAgY2xhc3M9Im1hLTIgYnV0dG9uLWZvbnQiDQogICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiDQogICAgICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICMwMzk4REMgIWltcG9ydGFudDtib3JkZXItY29sb3I6IzAzOThEQyAhaW1wb3J0YW50OyB0ZXh0LXRyYW5zZm9ybTpub25lOyINCiAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGRpdGlvbmFsSW5mb0RldGFpbHMoKSINCiAgICAgICAgICAgID4NCiAgICAgICAgICAgICAgICBBZGQNCiAgICAgICAgICAgIDwvdi1idG4+DQogICAgICAgIDwvdi1kaWFsb2c+DQoNCg0KDQoNCjx2LWRpYWxvZyBjb250ZW50LWNsYXNzPSJteS1jdXN0b20tZGlhbG9nIg0KICAgICAgdi1tb2RlbD0iYWRkaXRpb25hbERlcERpYWxvZyINCiAgICAgIHdpZHRoPSI1MDAiDQogICAgICBoZWlnaHQ9IjcwMCINCiAgICAgIHRyYW5zaXRpb249ImRpYWxvZy1ib3R0b20tdHJhbnNpdGlvbiI+DQo8aDEgY2xhc3M9InRleHQtaDUgbGlnaHRlbi0yIHBvcHVwLWFsbG90bWVudC10aXRsZSIgc3R5bGU9ImZvbnQtc2l6ZTozMHB4ICFpbXBvcnRhbnQiPg0KICAgICAgICAgIEFkZGl0aW9uYWwgRGVwcmVjaWF0aW9uDQogICAgICAgIDwvaDE+DQo8di1kaXZpZGVyIGNsYXNzPSJibHVlVWxpbmUyIj48L3YtZGl2aWRlcj4NCjx2LWxheW91dCBzdHlsZT0iZGlzcGxheTpibG9jazttYXJnaW46NCUgMTMlIDIlIDEzJTsiPg0KICAgICAgPHYtbGF5b3V0Pg0KICAgICAgICAgICAgPHYtZmxleCB4czYgc3R5bGU9ImRpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7bWFyZ2luLXRvcDoxJTttYXJnaW4tcmlnaHQ6NSUiPg0KICAgICAgICAgICAgPHAgY2xhc3M9InRvZ2dsZS10ZXh0Ij5BcHBseSBBZGlpdGlvbmFsIERlcHJlY2lhdGlvbjwvcD4NCiAgICAgICAgICAgIDwvdi1mbGV4Pg0KICAgICAgICAgICAgIDx2LWZsZXggeHMxPg0KICAgICAgICAgICAgICAgICAgICA8di1zd2l0Y2gNCiAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iaXNBZGRpdGlvbmFsRGVwcmVjaWF0aW9uIg0KICAgICAgICAgICAgICAgICAgICA+DQogICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bGFiZWw+DQogICAgICAgICAgICAgICAgICAgIFllcw0KICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICA8L3Ytc3dpdGNoPg0KICAgICAgICAgICAgICAgIDwvdi1mbGV4Pg0KICAgICAgICAgICAgPC92LWxheW91dD4NCjx2LWxheW91dD4NCiAgICAgICAgICAgIDx2LWZsZXggeHM2IHN0eWxlPSJkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO21hcmdpbi10b3A6MSU7bWFyZ2luLXJpZ2h0OjUlIj4NCiAgICAgICAgICAgIDxwIGNsYXNzPSJ0b2dnbGUtdGV4dCI+QWRpaXRpb25hbCBEZXByZWNpYXRpb24gaW4gJTwvcD4NCiAgICAgICAgICAgIDwvdi1mbGV4Pg0KICAgICAgICAgICAgIDx2LWZsZXggeHMyPg0KICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIGF1dG9jb21wbGV0ZT0ib2ZmIiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhZGRpdGlvbmFsRGVwIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVuc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZGlhbG9nLXRleHQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjM3M3B4OyINCiAgICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4NCiAgICAgICAgICAgICAgICA8L3YtZmxleD4NCiAgICAgICAgICAgIDwvdi1sYXlvdXQ+DQo8L3YtbGF5b3V0Pg0KPHYtZGl2aWRlciBjbGFzcz0iYmx1ZVVsaW5lMiI+PC92LWRpdmlkZXI+DQo8di1idG4NCiAgICAgICAgICAgICAgICBjbGFzcz0ibWEtMiBidXR0b24tZm9udCINCiAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSINCiAgICAgICAgICAgICAgICBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogIzAzOThEQyAhaW1wb3J0YW50O2JvcmRlci1jb2xvcjojMDM5OERDICFpbXBvcnRhbnQ7IHRleHQtdHJhbnNmb3JtOm5vbmU7Ig0KICAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZERlcHJlY2lhdGlvbigpIg0KICAgICAgICAgICAgPg0KICAgICAgICAgICAgICAgIFNldA0KICAgICAgICAgICAgPC92LWJ0bj4NCiAgICAgICAgICAgICA8di1idG4NCiAgICAgICAgICAgICAgICBjbGFzcz0ibWEtMiBidXR0b24tZm9udCINCiAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSINCiAgICAgICAgICAgICAgICBvdXRsaW5lZA0KICAgICAgICAgICAgICAgIHN0eWxlPSJib3JkZXItY29sb3I6IzAzOThEQyAhaW1wb3J0YW50OyB0ZXh0LXRyYW5zZm9ybTpub25lOyINCiAgICAgICAgICAgICAgICAgQGNsaWNrPSJjYW5jZWxEZXByZWNpYXRpb24oKSINCiAgICAgICAgICAgID4NCiAgICAgICAgICAgICAgICBDYW5jZWwNCiAgICAgICAgICAgIDwvdi1idG4+DQogICAgICAgIDwvdi1kaWFsb2c+DQoNCg0KICAgIDx2LWRpYWxvZyBjb250ZW50LWNsYXNzPSJteS1jdXN0b20tZGlhbG9nIg0KICAgICAgdi1tb2RlbD0iYXNzZXRTb2xkRGlhbG9nIg0KICAgICAgd2lkdGg9IjUwMCINCiAgICAgIGhlaWdodD0iNzAwIg0KICAgICAgdHJhbnNpdGlvbj0iZGlhbG9nLWJvdHRvbS10cmFuc2l0aW9uIj4NCjxoMSBjbGFzcz0idGV4dC1oNSBsaWdodGVuLTIgcG9wdXAtYWxsb3RtZW50LXRpdGxlIiBzdHlsZT0iZm9udC1zaXplOjMwcHggIWltcG9ydGFudCI+DQogICAgICAgICAgU2FsZSBEZXRhaWxzDQogICAgICAgIDwvaDE+DQo8di1kaXZpZGVyIGNsYXNzPSJibHVlVWxpbmUyIj48L3YtZGl2aWRlcj4NCjx2LWxheW91dCBzdHlsZT0iZGlzcGxheTpibG9jazttYXJnaW46NCUgMTMlIDIlIDEzJTsiPg0KICAgICAgPHYtbGF5b3V0Pg0KICAgICAgICAgICAgPHYtZmxleCB4czUgc3R5bGU9ImRpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7bWFyZ2luLXRvcDoxJTttYXJnaW4tcmlnaHQ6NSUiPg0KICAgICAgICAgICAgPHAgY2xhc3M9InRvZ2dsZS10ZXh0Ij5Bc3NldHMgc29sZCBEdXJpbmcgdGhlIHllYXI8L3A+DQogICAgICAgICAgICA8L3YtZmxleD4NCiAgICAgICAgICAgICA8di1mbGV4IHhzMT4NCiAgICAgICAgICAgICAgICAgICAgPHYtc3dpdGNoDQogICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImlzQXNzZXRTb2xkVGhpc1llYXIiDQogICAgICAgICAgICAgICAgICAgID4NCiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpsYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgWWVzDQogICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+DQogICAgICAgICAgICAgICAgICAgIDwvdi1zd2l0Y2g+DQogICAgICAgICAgICAgICAgPC92LWZsZXg+DQogICAgICAgICAgICA8L3YtbGF5b3V0Pg0KICAgPHYtbWVudQ0KICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJtZW51MSINCiAgICAgICAgICAgICAgICAgICAgOmNsb3NlLW9uLWNvbnRlbnQtY2xpY2s9ImZhbHNlIg0KICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPSJzY2FsZS10cmFuc2l0aW9uIg0KICAgICAgICAgICAgICAgICAgICBvZmZzZXQteQ0KICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg9ImF1dG8iDQogICAgICAgICAgICAgICAgICAgIG1pbi13aWR0aD0iYXV0byINCiAgICAgICAgICAgICAgICA+DQogICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iPg0KICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIGF1dG9jb21wbGV0ZT0ib2ZmIiANCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNhbGVEYXRlIg0KICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdGVudC1oaW50DQogICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQtaWNvbj0ibWRpLWNhbGVuZGFyIg0KICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kPSJhdHRycyINCiAgICAgICAgICAgICAgICAgICAgICAgIHYtb249Im9uIg0KICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0PSJNTS1kZC15eXl5Ig0KICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IkRhdGUgb2YgU2FsZSINCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkaWFsb2ctdGV4dCINCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDozNzNweCINCiAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkDQogICAgICAgICAgICAgICAgICAgICAgICBkZW5zZQ0KICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+DQogICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgPHYtZGF0ZS1waWNrZXINCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNhbGVEYXRlIg0KICAgICAgICAgICAgICAgICAgICAgICAgbm8tdGl0bGUNCiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGUtZGV0YWlscw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0PSJNTS1kZC15eXl5Ig0KICAgICAgICAgICAgICAgICAgICAgICAgQGlucHV0PSJtZW51MSA9IGZhbHNlIg0KICAgICAgICAgICAgICAgICAgICA+PC92LWRhdGUtcGlja2VyPg0KICAgICAgICAgICAgICAgIDwvdi1tZW51Pg0KICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgYXV0b2NvbXBsZXRlPSJvZmYiIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNhbGVWYWx1ZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbnNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlNhbGUgdmFsdWUgaW4gUnMuIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkaWFsb2ctdGV4dCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MzczcHgiDQogICAgICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+DQo8L3YtbGF5b3V0Pg0KPHYtZGl2aWRlciBjbGFzcz0iYmx1ZVVsaW5lMiI+PC92LWRpdmlkZXI+DQo8di1idG4NCiAgICAgICAgICAgICAgICBjbGFzcz0ibWEtMiBidXR0b24tZm9udCINCiAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSINCiAgICAgICAgICAgICAgICBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogIzAzOThEQyAhaW1wb3J0YW50O2JvcmRlci1jb2xvcjojMDM5OERDICFpbXBvcnRhbnQ7IHRleHQtdHJhbnNmb3JtOm5vbmU7Ig0KICAgICAgICAgICAgICAgICBAY2xpY2s9ImFkZFNvbGREZXRhaWxzKCkiDQogICAgICAgICAgICA+DQogICAgICAgICAgICAgICAgQWRkDQogICAgICAgICAgICA8L3YtYnRuPg0KICAgICAgICAgICAgIDx2LWJ0bg0KICAgICAgICAgICAgICAgIGNsYXNzPSJtYS0yIGJ1dHRvbi1mb250Ig0KICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5Ig0KICAgICAgICAgICAgICAgIG91dGxpbmVkDQogICAgICAgICAgICAgICAgc3R5bGU9ImJvcmRlci1jb2xvcjojMDM5OERDICFpbXBvcnRhbnQ7IHRleHQtdHJhbnNmb3JtOm5vbmU7Ig0KICAgICAgICAgICAgICAgICBAY2xpY2s9ImNhbmNlbFNvbGREZXRhaWxzKCkiDQogICAgICAgICAgICA+DQogICAgICAgICAgICAgICAgQ2FuY2VsDQogICAgICAgICAgICA8L3YtYnRuPg0KICAgICAgICA8L3YtZGlhbG9nPg0KDQoNCg0KICA8di1kaWFsb2cgY29udGVudC1jbGFzcz0ibXktY3VzdG9tLWRpYWxvZyINCiAgICAgIHYtbW9kZWw9ImFkZE9wZW5pbmdEaWFsb2ciDQogICAgICB3aWR0aD0iNTAwIg0KICAgICAgaGVpZ2h0PSI3MDAiDQogICAgICB0cmFuc2l0aW9uPSJkaWFsb2ctYm90dG9tLXRyYW5zaXRpb24iPg0KPGgxIGNsYXNzPSJ0ZXh0LWg1IGxpZ2h0ZW4tMiBwb3B1cC1hbGxvdG1lbnQtdGl0bGUiIHN0eWxlPSJmb250LXNpemU6MzBweCAhaW1wb3J0YW50Ij4NCiAgICAgICAgICB7eyBoZWFkZXJfb3BlbmluZyB9fQ0KICAgICAgICA8L2gxPg0KPHYtZGl2aWRlciBjbGFzcz0iYmx1ZVVsaW5lMiI+PC92LWRpdmlkZXI+DQo8di1sYXlvdXQgc3R5bGU9ImRpc3BsYXk6YmxvY2s7bWFyZ2luOjQlIDEzJSAyJSAxMyU7Ij4NCiAgPHYtc2VsZWN0DQogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImFzc2V0R3JvdXAiDQogICAgICAgICAgICAgICAgICAgIDppdGVtcz0iYXNzZXRncm91cF9pdGVtcyINCiAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQNCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjM3M3B4Ig0KICAgICAgICAgICAgICAgICAgICBkZW5zZQ0KICAgICAgICAgICAgICAgICAgICBsYWJlbD0iQXNzZXRzIEdyb3VwIg0KICAgICAgICAgICAgICAgICAgICByZXF1aXJlZA0KICAgICAgICAgICAgICAgID48L3Ytc2VsZWN0Pg0KICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgYXV0b2NvbXBsZXRlPSJvZmYiIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9Im9wZW5pbmdXRFYiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZW5zZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJPcGVuaW5nIFdEViINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZGlhbG9nLXRleHQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjM3M3B4Ig0KICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPg0KICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgYXV0b2NvbXBsZXRlPSJvZmYiIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InRvdGFsTGlmZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9IiFpdENvbnRlbnQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0idG90YWxMaWZlQ2hhbmdlIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbnNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlRvdGFsIExpZmUgb2YgQXNzZXRzIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkaWFsb2ctdGV4dCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MzczcHgiDQogICAgICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBhdXRvY29tcGxldGU9Im9mZiIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZXhwaXJlZExpZmUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSIhaXRDb250ZW50Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9InRvdGFsTGlmZUNoYW5nZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZW5zZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJBc3NldCBMaWZlIEV4cGlyZWQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRpYWxvZy10ZXh0Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDozNzNweCINCiAgICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6YmxvY2siPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSIhaXRDb250ZW50IiBzdHlsZT0id2lkdGg6MzczcHg7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmJhc2VsaW5lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Im1hcmdpbi1yaWdodDo0JSI+QmFsYW5jZSBMaWZlPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBhdXRvY29tcGxldGU9Im9mZiIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iYmFsYW5jZUxpZmUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbnNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZA0KICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8cCB2LWlmPSIhaXRDb250ZW50IiBzdHlsZT0idGV4dC1hbGlnbjppbml0aWFsIj4oQXMgb24gMXN0IERheSBvZiBDdXJyZW50IEZZKTwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KPC92LWxheW91dD4NCjx2LWRpdmlkZXIgY2xhc3M9ImJsdWVVbGluZTIiPjwvdi1kaXZpZGVyPg0KPHYtYnRuDQogICAgICAgICAgICAgICAgY2xhc3M9Im1hLTIgYnV0dG9uLWZvbnQiDQogICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiDQogICAgICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICMwMzk4REMgIWltcG9ydGFudDtib3JkZXItY29sb3I6IzAzOThEQyAhaW1wb3J0YW50OyB0ZXh0LXRyYW5zZm9ybTpub25lOyINCiAgICAgICAgICAgICAgICAgQGNsaWNrPSIoKT0+e2lmKGVkaXRNb2RlPT10cnVlKXRoaXMuZWRpdE9wZW5pbmcoKTtlbHNlIHRoaXMuYWRkT3BlbmluZygpfSINCiAgICAgICAgICAgID4NCiAgICAgICAgICAgICAgICB7e2VkaXRNb2RlPT10cnVlPyJVcGRhdGUiOiJBZGQifX0NCiAgICAgICAgICAgIDwvdi1idG4+DQogICAgICAgICAgICAgPHYtYnRuDQogICAgICAgICAgICAgICAgY2xhc3M9Im1hLTIgYnV0dG9uLWZvbnQiDQogICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiDQogICAgICAgICAgICAgICAgb3V0bGluZWQNCiAgICAgICAgICAgICAgICBzdHlsZT0iYm9yZGVyLWNvbG9yOiMwMzk4REMgIWltcG9ydGFudDsgdGV4dC10cmFuc2Zvcm06bm9uZTsiDQogICAgICAgICAgICAgICAgIEBjbGljaz0iY2FuY2VsT3BlbmluZygpIg0KICAgICAgICAgICAgPg0KICAgICAgICAgICAgICAgIENhbmNlbA0KICAgICAgICAgICAgPC92LWJ0bj4NCiAgICAgICAgPC92LWRpYWxvZz4NCg0KDQoNCiAgPHYtZGlhbG9nIGNvbnRlbnQtY2xhc3M9Im15LWN1c3RvbS1kaWFsb2ciDQogICAgICB2LW1vZGVsPSJhZGRpdGlvbkRpYWxvZyINCiAgICAgIHdpZHRoPSI1MDAiDQogICAgICBoZWlnaHQ9IjcwMCINCiAgICAgIHRyYW5zaXRpb249ImRpYWxvZy1ib3R0b20tdHJhbnNpdGlvbiI+DQo8aDEgY2xhc3M9InRleHQtaDUgbGlnaHRlbi0yIHBvcHVwLWFsbG90bWVudC10aXRsZSIgc3R5bGU9ImZvbnQtc2l6ZTozMHB4ICFpbXBvcnRhbnQiPg0KICAgICAgICAgIHt7IGhlYWRlcl9uYW1lIH19DQogICAgICAgIDwvaDE+DQo8di1kaXZpZGVyIGNsYXNzPSJibHVlVWxpbmUyIj48L3YtZGl2aWRlcj4NCjx2LWxheW91dCBzdHlsZT0iZGlzcGxheTpibG9jazttYXJnaW46NCUgMTMlIDIlIDEzJTsiPg0KICAgICAgICAgICAgICAgPHYtbWVudQ0KICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJtZW51MSINCiAgICAgICAgICAgICAgICAgICAgOmNsb3NlLW9uLWNvbnRlbnQtY2xpY2s9ImZhbHNlIg0KICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPSJzY2FsZS10cmFuc2l0aW9uIg0KICAgICAgICAgICAgICAgICAgICBvZmZzZXQteQ0KICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg9ImF1dG8iDQogICAgICAgICAgICAgICAgICAgIG1pbi13aWR0aD0iYXV0byINCiAgICAgICAgICAgICAgICA+DQogICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iPg0KICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIGF1dG9jb21wbGV0ZT0ib2ZmIiANCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InB1cmNoYXNlRGF0ZSINCiAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNpc3RlbnQtaGludA0KICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kLWljb249Im1kaS1jYWxlbmRhciINCiAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiDQogICAgICAgICAgICAgICAgICAgICAgICB2LW9uPSJvbiINCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdD0iTU0tZGQteXl5eSINCiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJEYXRlIG9mIFB1cmNoYXNlIg0KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImRpYWxvZy10ZXh0Ig0KICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjM3M3B4Ig0KICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbnNlDQogICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4NCiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICA8di1kYXRlLXBpY2tlcg0KICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icHVyY2hhc2VEYXRlIg0KICAgICAgICAgICAgICAgICAgICAgICAgbm8tdGl0bGUNCiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGUtZGV0YWlscw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0PSJNTS1kZC15eXl5Ig0KICAgICAgICAgICAgICAgICAgICAgICAgQGlucHV0PSJtZW51MSA9IGZhbHNlIg0KICAgICAgICAgICAgICAgICAgICA+PC92LWRhdGUtcGlja2VyPg0KICAgICAgICAgICAgICAgIDwvdi1tZW51Pg0KICAgICAgICAgICAgICAgIDx2LW1lbnUNCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibWVudTEiDQogICAgICAgICAgICAgICAgICAgIDpjbG9zZS1vbi1jb250ZW50LWNsaWNrPSJmYWxzZSINCiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj0ic2NhbGUtdHJhbnNpdGlvbiINCiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LXkNCiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoPSJhdXRvIg0KICAgICAgICAgICAgICAgICAgICBtaW4td2lkdGg9ImF1dG8iDQogICAgICAgICAgICAgICAgPg0KICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9Ij4NCiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBhdXRvY29tcGxldGU9Im9mZiIgDQogICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ1c2VEYXRlIg0KICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdGVudC1oaW50DQogICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQtaWNvbj0ibWRpLWNhbGVuZGFyIg0KICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kPSJhdHRycyINCiAgICAgICAgICAgICAgICAgICAgICAgIHYtb249Im9uIg0KICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0PSJNTS1kZC15eXl5Ig0KICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IkRhdGUgb2YgUHV0IHRvIHVzZSINCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkaWFsb2ctdGV4dCINCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDozNzNweCINCiAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkDQogICAgICAgICAgICAgICAgICAgICAgICBkZW5zZQ0KICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+DQogICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4NCiAgICAgICAgICAgICAgICAgICAgPHYtZGF0ZS1waWNrZXINCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InVzZURhdGUiDQogICAgICAgICAgICAgICAgICAgICAgICBuby10aXRsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgaGlkZS1kZXRhaWxzDQogICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ9Ik1NLWRkLXl5eXkiDQogICAgICAgICAgICAgICAgICAgICAgICBAaW5wdXQ9Im1lbnUxID0gZmFsc2UiDQogICAgICAgICAgICAgICAgICAgID48L3YtZGF0ZS1waWNrZXI+DQogICAgICAgICAgICAgICAgPC92LW1lbnU+DQogICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZCBhdXRvY29tcGxldGU9Im9mZiIgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iYW1vdW50Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVuc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iQW1vdW50Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkaWFsb2ctdGV4dCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MzczcHgiDQogICAgICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+DQo8L3YtbGF5b3V0Pg0KPHYtZGl2aWRlciBjbGFzcz0iYmx1ZVVsaW5lMiI+PC92LWRpdmlkZXI+DQo8di1idG4NCiAgICAgICAgICAgICAgICBjbGFzcz0ibWEtMiBidXR0b24tZm9udCINCiAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSINCiAgICAgICAgICAgICAgICBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogIzAzOThEQyAhaW1wb3J0YW50O2JvcmRlci1jb2xvcjojMDM5OERDICFpbXBvcnRhbnQ7IHRleHQtdHJhbnNmb3JtOm5vbmU7Ig0KICAgICAgICAgICAgICAgICBAY2xpY2s9IigpPT57aWYodGhpcy5oZWFkZXJfbmFtZSA9PSAnRWRpdCBBZGRpdGlvbnMnKXRoaXMuZWRpdEFkZGl0aW9uKCk7ZWxzZSB0aGlzLmFkZE5ld0FkZGl0aW9uKCkoKX0iDQogICAgICAgICAgICA+DQogICAgICAgICAgICAgICAge3toZWFkZXJfbmFtZSA9PSAnRWRpdCBBZGRpdGlvbnMnPyJVcGRhdGUiOiJBZGQgTmV3In19DQogICAgICAgICAgICA8L3YtYnRuPg0KICAgICAgICA8L3YtZGlhbG9nPg0KDQo8di1sYXlvdXQ+DQogICAgICAgICAgICA8di1mbGV4IHhzMSAgc3R5bGU9Im1hcmdpbi1sZWZ0OjQlIj4NCiAgICAgICAgICAgICAgICA8cD48L3A+DQogICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvcHJvZmlsZS1pY29uLnBuZyIgaGVpZ2h0PSI2MCUiIHdpZHRoPSI2MCUiLz4NCiAgICAgICAgICAgIDwvdi1mbGV4Pg0KDQogICAgICAgICAgICA8di1mbGV4IHhzNCBzdHlsZT0iZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlciI+DQogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJjb21wYW55LWZvbnQiPlNod2V0aGEgRW50ZXJwcmlzZXM8L2g0Pg0KICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0ieWVhci1mb250Ij5GWSAyMDIxLTIyPC9oNT4NCiAgICAgICAgICAgICAgICAgPHYtZGl2aWRlcg0KICAgICAgICAgICAgICAgIGluc2V0DQogICAgICAgICAgICAgICAgdmVydGljYWwNCiAgICAgICAgICAgICAgICBjbGFzcz0iZGl2aWRlci1zaXplIg0KICAgICAgICAgICAgICAgID48L3YtZGl2aWRlcj4NCiAgICAgICAgICAgIDwvdi1mbGV4Pg0KDQogICAgICAgICAgICA8di1mbGV4IHN0eWxlPSJkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyIj4NCiAgICAgICAgICAgICAgICA8aDYgY2xhc3M9ImRhdGEtZm9udCI+PC9oNj4NCiAgICAgICAgICAgIDwvdi1mbGV4Pg0KICAgICAgICA8L3YtbGF5b3V0Pg0KICAgICAgICA8di1kaXZpZGVyIGNsYXNzPSJibHVlVWxpbmUiPjwvdi1kaXZpZGVyPg0KICAgICAgICA8ZGl2Pg0KICAgICAgICA8di1sYXlvdXQgc3R5bGU9Im1hcmdpbi10b3A6MnJlbTttYXJnaW4tYm90dG9tOjFyZW07d2lkdGg6MTAwJSI+DQogICAgICAgIDx2LWZsZXggIHN0eWxlPSJkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWV2ZW5seTsiPg0KICAgICAgICA8cCBjbGFzcz0ibGFiZWwtZm9udCI+QXNzZXQgQ2xhc3M8L3A+DQogICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWZvbnQiPnt7c2VsZWN0ZWRHcm91cERhdGEuYXNzZXRDbGFzc319PC9wPg0KICAgICAgICA8L3YtZmxleD4NCiAgICAgICAgPGRpdj4NCiAgICAgICAgICA8di1kaXZpZGVyIGluc2V0IHZlcnRpY2FsIGNsYXNzPSJkaXZpZGVyLXNpemUiPjwvdi1kaXZpZGVyPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgPHYtZmxleCAgc3R5bGU9ImRpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtZXZlbmx5Ij4NCiAgICAgICAgIDxwIGNsYXNzPSJsYWJlbC1mb250Ij5Bc3NldCBHcm91cDwvcD4NCiAgICAgICAgPHAgY2xhc3M9InRleHQtZm9udCI+e3tzZWxlY3RlZEdyb3VwRGF0YS5hc3NldEdyb3VwfX08L3A+DQogICAgICAgIDwvdi1mbGV4Pg0KICAgICAgICA8ZGl2Pg0KICAgICAgICAgIDx2LWRpdmlkZXIgaW5zZXQgdmVydGljYWwgY2xhc3M9ImRpdmlkZXItc2l6ZSI+PC92LWRpdmlkZXI+DQogICAgICAgICAgPC9kaXY+DQogICAgICAgICA8di1mbGV4ICBzdHlsZT0iZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1ldmVubHk7Ij4NCiAgICAgICAgIDxwIGNsYXNzPSJsYWJlbC1mb250Ij5Bc3NldCBEZXByZWNpYXRpb248L3A+DQogICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWZvbnQiPjIwJTwvcD4NCiAgICAgICAgPC92LWZsZXg+DQoNCiAgICAgICAgPC92LWxheW91dD4NCiAgICAgPC9kaXY+DQogICAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImdyZXktZGl2aWRlciI+PC92LWRpdmlkZXI+DQogICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXktZmxleDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmQ7bWFyZ2luOjIlO21hcmdpbi1sZWZ0Ojc3JSI+DQogICAgICAgICA8di10ZXh0LWZpZWxkIGF1dG9jb21wbGV0ZT0ib2ZmIiANCiAgICAgICAgICAgICAgICBkZW5zZQ0KICAgICAgICAgICAgICAgIG91dGxpbmVkDQogICAgICAgICAgICAgICAgYXBwZW5kLWljb249Im1kaS1tYWduaWZ5Ig0KICAgICAgICAgICAgICAgIGNsYXNzPSJ0ZXh0LWZpZWxkLWNsYXNzIg0KICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJTZWFyY2ggaGVyZSINCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJzZWFyY2giDQogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjM1OXB4O2hlaWdodDo0MXB4OyINCiAgICAgICAgICAgICAgICBAaW5wdXQ9Im9uQ2hhbmdlU2VhcmNoIg0KICAgICAgICAgICAgICAgIGhpZGUtZGV0YWlscz1mYWxzZQ0KICAgICAgICAgICAgPg0KICAgICAgICAgICAgPC92LXRleHQtZmllbGQ+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDx2LXRhYnMNCiAgICAgIHYtbW9kZWw9InRhYiINCiAgICAgIGNsYXNzPSJ0YWItZGVjb3IiDQogICAgICBncm93DQogICAgPg0KICAgICAgPHYtdGFiDQogICAgICAgIHYtZm9yPSJpdGVtIGluIGl0ZW1zIg0KICAgICAgICA6a2V5PSJpdGVtIg0KICAgICAgICBjbGFzcz0idGFiLWRlY29yMSINCiAgICAgID4NCiAgICAgICAge3sgaXRlbSB9fQ0KICAgICAgPC92LXRhYj4NCiAgICA8L3YtdGFicz4NCg0KICAgIDx2LXRhYnMtaXRlbXMgdi1tb2RlbD0idGFiIj4NCiAgICAgIDx2LXRhYi1pdGVtPg0KICAgICAgIDx2LWNhcmQNCiAgICAgICAgbWF4LXdpZHRoPSIxMDAlIg0KICAgICAgICBjbGFzcz0idGFibGUtYWxpZ24iDQogICAgICAgID4NCiAgICAgICAgPHYtY2FyZC10aXRsZT4NCiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ1dHRvbkRpci1mb250IiBAY2xpY2s9ImFkZEFkZGl0aW9uc0RhdGEoKSI+DQogICAgICAgICAgICAgICAgPHYtaWNvbiBzdHlsZT0iY29sb3I6YmxhY2siPm1kaS1wbHVzPC92LWljb24+DQogICAgICAgICAgICAgICAgICAgIEFkZA0KICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgPHYtZGl2aWRlcg0KICAgICAgICAgICAgaW5zZXQNCiAgICAgICAgICAgIHZlcnRpY2FsDQogICAgICAgICAgICBzdHlsZT0ibWF4LWhlaWdodDoyNXB4O2NvbG9yOiAjQzRDNEM0OyINCiAgICAgICAgICAgID48L3YtZGl2aWRlcj4NCiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ1dHRvbkRpci1mb250Ij4NCiAgICAgICAgICAgICAgICA8di1pY29uIHN0eWxlPSJjb2xvcjpibGFjayI+bWRpLWFycm93LWNvbGxhcHNlLXVwPC92LWljb24+DQogICAgICAgICAgICAgICAgICAgIEV4cG9ydA0KICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgPHYtZGl2aWRlcg0KICAgICAgICAgICAgaW5zZXQNCiAgICAgICAgICAgIHZlcnRpY2FsDQogICAgICAgICAgICBzdHlsZT0ibWF4LWhlaWdodDoyNXB4O2NvbG9yOiAjQzRDNEM0OyINCiAgICAgICAgICAgID48L3YtZGl2aWRlcj4NCiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ1dHRvbkRpci1mb250Ij4NCiAgICAgICAgICAgICAgICA8di1pY29uIHNtYWxsIHN0eWxlPSJjb2xvcjpibGFjayI+ZmFyIGZhLXRyYXNoLWFsdDwvdi1pY29uPg0KICAgICAgICAgICAgICAgICAgICBEZWxldGUNCiAgICAgICAgICAgIDwvYnV0dG9uPg0KDQogICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4NCg0KICAgICAgICA8L3YtY2FyZC10aXRsZT4NCiAgICAgICAgPHYtZGF0YS10YWJsZQ0KICAgICAgICAgICAgOmhlYWRlcnM9ImhlYWRlcnMiDQogICAgICAgICAgICA6aXRlbXM9ImZhQWRkaXRpb24iDQogICAgICAgICAgICA6c2luZ2xlLXNlbGVjdD0ic2luZ2xlU2VsZWN0Ig0KICAgICAgICAgICAgc2hvdy1zZWxlY3QNCiAgICAgICAgICAgIGNsYXNzPSJlbGV2YXRpb24tMSB0YWJsZS1mb250Ig0KICAgICAgICAgICAgbG9hZGluZz0iTG9hZGluZy4uLi4iDQogICAgICAgID4NCiAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDppdGVtLnNhbGVEZXRhaWxzPSJ7IGl0ZW0gfSIgPg0KICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW4tdG9wOjglIj57e2l0ZW0uc2FsZURldGFpbHM/IlNvbGQiOiJBY3RpdmUifX08L3A+DQo8L3RlbXBsYXRlPg0KICAgICAgICA8dGVtcGxhdGUgdi1zbG90Oml0ZW0uaXNBc3NldFNvbGRUaGlzWWVhcj0ieyBpdGVtIH0iID4NCiAgPGJ1dHRvbiBjbGFzcz0iYWN0aW9uLWJ1dHRvbiIgIEBjbGljay5zdG9wLnByZXZlbnQgQGNsaWNrPSJhc3NldHNvbGQoaXRlbSkiPg0KICAgICAgICAgICAgICAgICAgICB7e2l0ZW0uaXNBc3NldFNvbGRUaGlzWWVhcj09dHJ1ZT8iWWVzIjoiTm8ifX0NCiAgICAgICAgICAgIDwvYnV0dG9uPg0KPC90ZW1wbGF0ZT4NCjx0ZW1wbGF0ZSB2LXNsb3Q6aXRlbS5pc0FkZGl0aW9uYWxEZXByZWNpYXRpb249InsgaXRlbSB9IiA+DQogIDxidXR0b24gY2xhc3M9ImFjdGlvbi1idXR0b24iICBAY2xpY2suc3RvcC5wcmV2ZW50IEBjbGljaz0iYWRkaXRpb25hbGRlcChpdGVtKSI+DQogICAgICAgICAgICAgICAgICAgIHt7aXRlbS5pc0FkZGl0aW9uYWxEZXByZWNpYXRpb249PXRydWU/IlllcyI6Ik5vIn19DQogICAgICAgICAgICA8L2J1dHRvbj4NCjwvdGVtcGxhdGU+DQo8dGVtcGxhdGUgdi1zbG90Oml0ZW0uaXNBZGRpdGlvbmFsSW5mbz0ieyBpdGVtIH0iID4NCiAgPGJ1dHRvbiBjbGFzcz0iYWN0aW9uLWJ1dHRvbiIgdi1pZj0iIWl0ZW0uaXNBZGRpdGlvbmFsSW5mbyIgIEBjbGljay5zdG9wLnByZXZlbnQgQGNsaWNrPSJhZGRJbmZvKGl0ZW0pIj4NCiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBzdHlsZT0iY29sb3I6IzAzOThEQzt3aWR0aDoxMnB4O2hlaWdodDoxMnB4O21hcmdpbi1yaWdodDo4cHgiPm1kaS1wbHVzPC92LWljb24+DQogICAgICAgICAgICAgICAgICAgIEFkZA0KICAgICAgICAgICAgPC9idXR0b24+DQogICAgPHAgdi1pZj0iaXRlbS5pc0FkZGl0aW9uYWxJbmZvIiBzdHlsZT0iY29sb3I6Z3JlZW47bWFyZ2luLXRvcDo4JSI+QWRkZWQ8L3A+DQo8L3RlbXBsYXRlPg0KICAgICAgICA8dGVtcGxhdGUgdi1zbG90Oml0ZW0uYWN0aW9ucz0ieyBpdGVtIH0iPg0KICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47YWxpZ24taXRlbXM6Y2VudGVyO21hcmdpbi1yaWdodDoxcmVtIj4NCiAgICAgIA0KICAgICAgICAgICA8di1tZW51IGJvdHRvbSBvZmZzZXQteT0idHJ1ZSIgcmlnaHQ+DQogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9Ij4NCiAgICAgICAgICAgICAgICA8di1pY29uDQogICAgICAgICAgICAgICAgICBzbWFsbA0KICAgICAgICAgICAgICAgICAgdi1iaW5kPSJhdHRycyINCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIg0KICAgICAgICAgICAgICAgICAgY2xhc3M9Im1yLTIiDQogICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6YmxhY2s7d2lkdGg6M3B4O2hlaWdodDozcHg7Zm9udCINCiAgICAgICAgICAgICAgICAgID5tZGktZG90cy12ZXJ0aWNhbDwvdi1pY29uDQogICAgICAgICAgICAgICAgPg0KICAgICAgICAgICAgICA8L3RlbXBsYXRlPg0KDQogICAgICAgICAgICAgIDx2LWxpc3Q+DQogICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtPg0KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIEBjbGljaz0iKGUpPT5lZGl0SXRlbShpdGVtKSINCiAgICAgICAgICAgICAgICAgICAgPjx2LWljb24gc3R5bGU9Im1hcmdpbi1yaWdodDogNXB4Ig0KICAgICAgICAgICAgICAgICAgICAgID5tZGktcGVuY2lsLW91dGxpbmU8L3YtaWNvbg0KICAgICAgICAgICAgICAgICAgICA+RWRpdDwvdi1saXN0LWl0ZW0tdGl0bGUNCiAgICAgICAgICAgICAgICAgID4NCiAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPg0KICAgICAgICAgICAgICAgIDx2LWRpdmlkZXI+PC92LWRpdmlkZXI+DQogICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtPg0KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIEBjbGljaz0iZGVsZXRlSXRlbShpdGVtKSINCiAgICAgICAgICAgICAgICAgICAgPjx2LWljb24gc3R5bGU9Im1hcmdpbi1yaWdodDogNXB4Ig0KICAgICAgICAgICAgICAgICAgICAgID5tZGktZGVsZXRlLW91dGxpbmU8L3YtaWNvbg0KICAgICAgICAgICAgICAgICAgICA+RGVsZXRlPC92LWxpc3QtaXRlbS10aXRsZQ0KICAgICAgICAgICAgICAgICAgPg0KICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+DQogICAgICAgICAgICAgIDwvdi1saXN0Pg0KICAgICAgICAgICAgPC92LW1lbnU+DQogICAgICA8L2Rpdj4NCiAgICA8L3RlbXBsYXRlPg0KICAgICAgICA8L3YtZGF0YS10YWJsZT4NCiAgICAgICAgICAgIA0KICAgICAgICA8L3YtY2FyZD4NCiAgICAgIDwvdi10YWItaXRlbT4NCg0KICAgICAgPHYtdGFiLWl0ZW0+DQogICAgICA8di1jYXJkDQogICAgICAgIG1heC13aWR0aD0iMTAwJSINCiAgICAgICAgY2xhc3M9InRhYmxlLWFsaWduIg0KICAgICAgICA+DQogICAgICAgIDx2LWNhcmQtdGl0bGU+DQogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidXR0b25EaXItZm9udCIgQGNsaWNrPSJhZGRJVE9wZW5pbmcoKSI+DQogICAgICAgICAgICAgICAgPHYtaWNvbiBzdHlsZT0iY29sb3I6YmxhY2siPm1kaS1wbHVzPC92LWljb24+DQogICAgICAgICAgICAgICAgICAgIEFkZCBJVCBPcGVuaW5nIFdEVg0KICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgPHYtZGl2aWRlcg0KICAgICAgICAgICAgaW5zZXQNCiAgICAgICAgICAgIHZlcnRpY2FsDQogICAgICAgICAgICBzdHlsZT0ibWF4LWhlaWdodDoyNXB4O2NvbG9yOiAjQzRDNEM0OyINCiAgICAgICAgICAgID48L3YtZGl2aWRlcj4NCiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ1dHRvbkRpci1mb250IiBAY2xpY2s9ImFkaG9jT3BlbmluZygpIj4NCiAgICAgICAgICAgICAgICA8di1pY29uIHN0eWxlPSJjb2xvcjpibGFjayI+bWRpLXBsdXM8L3YtaWNvbj4NCiAgICAgICAgICAgICAgICAgICAgQWRkIEFkaG9jIENvbXBhbmllcyBBY3QgV0RWDQogICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICA8di1kaXZpZGVyDQogICAgICAgICAgICBpbnNldA0KICAgICAgICAgICAgdmVydGljYWwNCiAgICAgICAgICAgIHN0eWxlPSJtYXgtaGVpZ2h0OjI1cHg7Y29sb3I6ICNDNEM0QzQ7Ig0KICAgICAgICAgICAgPjwvdi1kaXZpZGVyPg0KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnV0dG9uRGlyLWZvbnQiPg0KICAgICAgICAgICAgICAgIDx2LWljb24gc3R5bGU9ImNvbG9yOmJsYWNrIj5tZGktYXJyb3ctY29sbGFwc2UtdXA8L3YtaWNvbj4NCiAgICAgICAgICAgICAgICAgICAgRXhwb3J0DQogICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICA8di1kaXZpZGVyDQogICAgICAgICAgICBpbnNldA0KICAgICAgICAgICAgdmVydGljYWwNCiAgICAgICAgICAgIHN0eWxlPSJtYXgtaGVpZ2h0OjI1cHg7Y29sb3I6ICNDNEM0QzQ7Ig0KICAgICAgICAgICAgPjwvdi1kaXZpZGVyPg0KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnV0dG9uRGlyLWZvbnQiPg0KICAgICAgICAgICAgICAgIDx2LWljb24gc21hbGwgc3R5bGU9ImNvbG9yOmJsYWNrIj5mYXIgZmEtdHJhc2gtYWx0PC92LWljb24+DQogICAgICAgICAgICAgICAgICAgIERlbGV0ZQ0KICAgICAgICAgICAgPC9idXR0b24+DQoNCiAgICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPg0KDQogICAgICAgIDwvdi1jYXJkLXRpdGxlPg0KICAgICAgICA8di1kYXRhLXRhYmxlDQogICAgICAgICAgICA6aGVhZGVycz0iaGVhZGVyc29wZW5pbmciDQogICAgICAgICAgICA6aXRlbXM9ImZhT3BlbmluZyINCiAgICAgICAgICAgIDpzaW5nbGUtc2VsZWN0PSJzaW5nbGVTZWxlY3QiDQogICAgICAgICAgICBzaG93LXNlbGVjdA0KICAgICAgICAgICAgY2xhc3M9ImVsZXZhdGlvbi0xIHRhYmxlLWZvbnQiDQogICAgICAgICAgICBsb2FkaW5nPSJMb2FkaW5nLi4uLiINCiAgICAgICAgPg0KICAgICAgICA8dGVtcGxhdGUgdi1zbG90Oml0ZW0uYWN0aW9ucz0ieyBpdGVtIH0iPg0KICAgICAgICA8di1tZW51IGJvdHRvbSBvZmZzZXQteT0idHJ1ZSIgcmlnaHQ+DQogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9Ij4NCiAgICAgICAgICAgICAgICA8di1pY29uDQogICAgICAgICAgICAgICAgICBzbWFsbA0KICAgICAgICAgICAgICAgICAgdi1iaW5kPSJhdHRycyINCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIg0KICAgICAgICAgICAgICAgICAgY2xhc3M9Im1yLTIiDQogICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6YmxhY2s7d2lkdGg6M3B4O2hlaWdodDozcHg7Zm9udCINCiAgICAgICAgICAgICAgICAgID5tZGktZG90cy12ZXJ0aWNhbDwvdi1pY29uDQogICAgICAgICAgICAgICAgPg0KICAgICAgICAgICAgICA8L3RlbXBsYXRlPg0KDQogICAgICAgICAgICAgIDx2LWxpc3Q+DQogICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtPg0KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlIEBjbGljaz0iKGUpPT5lZGl0SXRlbU9wZW5pbmcoaXRlbSkiDQogICAgICAgICAgICAgICAgICAgID48di1pY29uIHN0eWxlPSJtYXJnaW4tcmlnaHQ6IDVweCINCiAgICAgICAgICAgICAgICAgICAgICA+bWRpLXBlbmNpbC1vdXRsaW5lPC92LWljb24NCiAgICAgICAgICAgICAgICAgICAgPkVkaXQ8L3YtbGlzdC1pdGVtLXRpdGxlDQogICAgICAgICAgICAgICAgICA+DQogICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4NCiAgICAgICAgICAgICAgICA8di1kaXZpZGVyPjwvdi1kaXZpZGVyPg0KICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbT4NCiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZSBAY2xpY2s9ImRlbGV0ZUl0ZW1PcGVuaW5nKGl0ZW0pIg0KICAgICAgICAgICAgICAgICAgICA+PHYtaWNvbiBzdHlsZT0ibWFyZ2luLXJpZ2h0OiA1cHgiDQogICAgICAgICAgICAgICAgICAgICAgPm1kaS1kZWxldGUtb3V0bGluZTwvdi1pY29uDQogICAgICAgICAgICAgICAgICAgID5EZWxldGU8L3YtbGlzdC1pdGVtLXRpdGxlDQogICAgICAgICAgICAgICAgICA+DQogICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4NCiAgICAgICAgICAgICAgPC92LWxpc3Q+DQogICAgICAgICAgICA8L3YtbWVudT4NCiAgICA8L3RlbXBsYXRlPg0KICAgICAgICA8L3YtZGF0YS10YWJsZT4NCiAgICAgICAgICAgIA0KICAgICAgICA8L3YtY2FyZD4NCiAgICAgIDwvdi10YWItaXRlbT4NCiAgICA8L3YtdGFicy1pdGVtcz4NCiAgPC9kaXY+DQo="},null]}