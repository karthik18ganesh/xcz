{"version":3,"sources":["../../src/ts/columns/columnApi.ts"],"names":[],"mappings":"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","file":"columnApi.js","sourcesContent":["import { ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { ColumnGroupChild } from \"../entities/columnGroupChild\";\nimport { ColumnModel, ColumnState } from \"./columnModel\";\nimport { OriginalColumnGroup } from \"../entities/originalColumnGroup\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { Column } from \"../entities/column\";\nimport { Autowired, Bean, PreDestroy } from \"../context/context\";\nimport { _ } from \"../utils\";\nimport { ColumnEventType } from \"../events\";\n\n@Bean('columnApi')\nexport class ColumnApi {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    public sizeColumnsToFit(gridWidth: number): void {\n        // AG-3403 validate that gridWidth is provided because this method has the same name as\n        // a method on the grid API that takes no arguments, and it's easy to confuse the two\n        if (typeof gridWidth === \"undefined\") {\n            console.error('AG Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)');\n        }\n        this.columnModel.sizeColumnsToFit(gridWidth, 'api');\n    }\n    public setColumnGroupOpened(group: OriginalColumnGroup | string, newValue: boolean): void { this.columnModel.setColumnGroupOpened(group, newValue, 'api'); }\n    public getColumnGroup(name: string, instanceId?: number): ColumnGroup | null { return this.columnModel.getColumnGroup(name, instanceId); }\n    public getOriginalColumnGroup(name: string): OriginalColumnGroup | null { return this.columnModel.getOriginalColumnGroup(name); }\n\n    public getDisplayNameForColumn(column: Column, location: string | null): string { return this.columnModel.getDisplayNameForColumn(column, location) || ''; }\n    public getDisplayNameForColumnGroup(columnGroup: ColumnGroup, location: string): string { return this.columnModel.getDisplayNameForColumnGroup(columnGroup, location) || ''; }\n\n    public getColumn(key: any): Column | null { return this.columnModel.getPrimaryColumn(key); }\n    public applyColumnState(params: ApplyColumnStateParams): boolean { return this.columnModel.applyColumnState(params, 'api'); }\n    public getColumnState(): ColumnState[] { return this.columnModel.getColumnState(); }\n    public resetColumnState(): void { this.columnModel.resetColumnState('api'); }\n    public getColumnGroupState(): {groupId: string, open: boolean}[] {return this.columnModel.getColumnGroupState(); }\n    public setColumnGroupState(stateItems: ({groupId: string, open: boolean})[]): void {this.columnModel.setColumnGroupState(stateItems, 'api'); }\n    public resetColumnGroupState(): void { this.columnModel.resetColumnGroupState('api'); }\n\n    public isPinning(): boolean { return this.columnModel.isPinningLeft() || this.columnModel.isPinningRight(); }\n    public isPinningLeft(): boolean { return this.columnModel.isPinningLeft(); }\n    public isPinningRight(): boolean { return this.columnModel.isPinningRight(); }\n    public getDisplayedColAfter(col: Column): Column | null { return this.columnModel.getDisplayedColAfter(col); }\n    public getDisplayedColBefore(col: Column): Column | null { return this.columnModel.getDisplayedColBefore(col); }\n    public setColumnVisible(key: string | Column, visible: boolean): void { this.columnModel.setColumnVisible(key, visible, 'api'); }\n    public setColumnsVisible(keys: (string | Column)[], visible: boolean): void { this.columnModel.setColumnsVisible(keys, visible, 'api'); }\n    public setColumnPinned(key: string | Column, pinned: string): void { this.columnModel.setColumnPinned(key, pinned, 'api'); }\n    public setColumnsPinned(keys: (string | Column)[], pinned: string): void { this.columnModel.setColumnsPinned(keys, pinned, 'api'); }\n\n    public getAllColumns(): Column[] | null { return this.columnModel.getAllPrimaryColumns(); }\n    public getAllGridColumns(): Column[] { return this.columnModel.getAllGridColumns(); }\n    public getDisplayedLeftColumns(): Column[] { return this.columnModel.getDisplayedLeftColumns(); }\n    public getDisplayedCenterColumns(): Column[] { return this.columnModel.getDisplayedCenterColumns(); }\n    public getDisplayedRightColumns(): Column[] { return this.columnModel.getDisplayedRightColumns(); }\n    public getAllDisplayedColumns(): Column[] { return this.columnModel.getAllDisplayedColumns(); }\n    public getAllDisplayedVirtualColumns(): Column[] { return this.columnModel.getViewportColumns(); }\n\n    public moveColumn(key: string | Column, toIndex: number): void {\n        if (typeof key === 'number') {\n            // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name\n            console.warn('AG Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');\n            this.columnModel.moveColumnByIndex(key as number, toIndex, 'api');\n        } else {\n            this.columnModel.moveColumn(key, toIndex, 'api');\n        }\n    }\n    public moveColumnByIndex(fromIndex: number, toIndex: number): void { this.columnModel.moveColumnByIndex(fromIndex, toIndex, 'api'); }\n    public moveColumns(columnsToMoveKeys: (string | Column)[], toIndex: number) { this.columnModel.moveColumns(columnsToMoveKeys, toIndex, 'api'); }\n\n    public moveRowGroupColumn(fromIndex: number, toIndex: number): void { this.columnModel.moveRowGroupColumn(fromIndex, toIndex); }\n    public setColumnAggFunc(key: string | Column, aggFunc: string): void { this.columnModel.setColumnAggFunc(key, aggFunc); }\n\n    public setColumnWidth(key: string | Column, newWidth: number, finished: boolean = true, source?: ColumnEventType): void {\n        this.columnModel.setColumnWidths([{key, newWidth}], false, finished, source);\n    }\n    public setColumnWidths(columnWidths: {key: string | Column, newWidth: number}[], finished: boolean = true, source?: ColumnEventType): void {\n        this.columnModel.setColumnWidths(columnWidths, false, finished, source);\n    }\n\n    public setPivotMode(pivotMode: boolean): void { this.columnModel.setPivotMode(pivotMode); }\n    public isPivotMode(): boolean { return this.columnModel.isPivotMode(); }\n    public getSecondaryPivotColumn(pivotKeys: string[], valueColKey: string | Column): Column | null { return this.columnModel.getSecondaryPivotColumn(pivotKeys, valueColKey); }\n\n    public setValueColumns(colKeys: (string | Column)[]): void { this.columnModel.setValueColumns(colKeys, 'api'); }\n    public getValueColumns(): Column[] { return this.columnModel.getValueColumns(); }\n    public removeValueColumn(colKey: (string | Column)): void { this.columnModel.removeValueColumn(colKey, 'api'); }\n    public removeValueColumns(colKeys: (string | Column)[]): void { this.columnModel.removeValueColumns(colKeys, 'api'); }\n    public addValueColumn(colKey: (string | Column)): void { this.columnModel.addValueColumn(colKey, 'api'); }\n    public addValueColumns(colKeys: (string | Column)[]): void { this.columnModel.addValueColumns(colKeys, 'api'); }\n\n    public setRowGroupColumns(colKeys: (string | Column)[]): void { this.columnModel.setRowGroupColumns(colKeys, 'api'); }\n    public removeRowGroupColumn(colKey: string | Column): void { this.columnModel.removeRowGroupColumn(colKey, 'api'); }\n    public removeRowGroupColumns(colKeys: (string | Column)[]): void { this.columnModel.removeRowGroupColumns(colKeys, 'api'); }\n    public addRowGroupColumn(colKey: string | Column): void { this.columnModel.addRowGroupColumn(colKey, 'api'); }\n    public addRowGroupColumns(colKeys: (string | Column)[]): void { this.columnModel.addRowGroupColumns(colKeys, 'api'); }\n    public getRowGroupColumns(): Column[] { return this.columnModel.getRowGroupColumns(); }\n\n    public setPivotColumns(colKeys: (string | Column)[]): void { this.columnModel.setPivotColumns(colKeys, 'api'); }\n    public removePivotColumn(colKey: string | Column): void { this.columnModel.removePivotColumn(colKey, 'api'); }\n    public removePivotColumns(colKeys: (string | Column)[]): void { this.columnModel.removePivotColumns(colKeys, 'api'); }\n    public addPivotColumn(colKey: string | Column): void { this.columnModel.addPivotColumn(colKey, 'api'); }\n    public addPivotColumns(colKeys: (string | Column)[]): void { this.columnModel.addPivotColumns(colKeys, 'api'); }\n    public getPivotColumns(): Column[] { return this.columnModel.getPivotColumns(); }\n\n    public getLeftDisplayedColumnGroups(): ColumnGroupChild[] { return this.columnModel.getDisplayedTreeLeft(); }\n    public getCenterDisplayedColumnGroups(): ColumnGroupChild[] { return this.columnModel.getDisplayedTreeCentre(); }\n    public getRightDisplayedColumnGroups(): ColumnGroupChild[] { return this.columnModel.getDisplayedTreeRight(); }\n    public getAllDisplayedColumnGroups(): ColumnGroupChild[] | null { return this.columnModel.getAllDisplayedTrees(); }\n    public autoSizeColumn(key: string | Column, skipHeader?: boolean): void {return this.columnModel.autoSizeColumn(key, skipHeader, 'api'); }\n    public autoSizeColumns(keys: (string | Column)[], skipHeader?: boolean): void {return this.columnModel.autoSizeColumns(keys, skipHeader, 'api'); }\n    public autoSizeAllColumns(skipHeader?: boolean): void { this.columnModel.autoSizeAllColumns(skipHeader, 'api'); }\n\n    public setSecondaryColumns(colDefs: (ColDef | ColGroupDef)[]): void { this.columnModel.setSecondaryColumns(colDefs, 'api'); }\n\n    public getSecondaryColumns(): Column[] | null { return this.columnModel.getSecondaryColumns(); }\n    public getPrimaryColumns(): Column[] | null { return this.columnModel.getAllPrimaryColumns(); }\n\n    @PreDestroy\n    private cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid(): void {\n        // some users were raising support issues with regards memory leaks. the problem was the customers applications\n        // were keeping references to the API. trying to educate them all would be difficult, easier to just remove\n        // all references in teh API so at least the core grid can be garbage collected.\n        //\n        // wait about 100ms before clearing down the references, in case user has some cleanup to do,\n        // and needs to deference the API first\n        setTimeout(_.removeAllReferences.bind(window, this, 'Column API'), 100);\n    }\n\n    // below goes through deprecated items, prints message to user, then calls the new version of the same method\n\n    // public getColumnDefs(): (ColDef | ColGroupDef)[] {\n    //     this.setColumnGroupOpened(group, newValue);\n    //     return null;\n    // }\n\n    public columnGroupOpened(group: OriginalColumnGroup | string, newValue: boolean): void {\n        console.error('AG Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');\n        this.setColumnGroupOpened(group, newValue);\n    }\n    public hideColumns(colIds: any, hide: any): void {\n        console.error('AG Grid: hideColumns is deprecated, use setColumnsVisible');\n        this.columnModel.setColumnsVisible(colIds, !hide, 'api');\n    }\n    public hideColumn(colId: any, hide: any): void {\n        console.error('AG Grid: hideColumn is deprecated, use setColumnVisible');\n        this.columnModel.setColumnVisible(colId, !hide, 'api');\n    }\n\n    public setState(columnState: ColumnState[]): boolean {\n        console.error('AG Grid: setState is deprecated, use setColumnState');\n        return this.setColumnState(columnState);\n    }\n\n    public getState(): ColumnState[] {\n        console.error('AG Grid: getState is deprecated, use getColumnState');\n        return this.getColumnState();\n    }\n    public resetState(): void {\n        console.error('AG Grid: resetState is deprecated, use resetColumnState');\n        this.resetColumnState();\n    }\n\n    public getAggregationColumns(): Column[] {\n        console.error('AG Grid: getAggregationColumns is deprecated, use getValueColumns');\n        return this.columnModel.getValueColumns();\n    }\n\n    public removeAggregationColumn(colKey: (string | Column)): void {\n        console.error('AG Grid: removeAggregationColumn is deprecated, use removeValueColumn');\n        this.columnModel.removeValueColumn(colKey, 'api');\n    }\n\n    public removeAggregationColumns(colKeys: (string | Column)[]): void {\n        console.error('AG Grid: removeAggregationColumns is deprecated, use removeValueColumns');\n        this.columnModel.removeValueColumns(colKeys, 'api');\n    }\n\n    public addAggregationColumn(colKey: (string | Column)): void {\n        console.error('AG Grid: addAggregationColumn is deprecated, use addValueColumn');\n        this.columnModel.addValueColumn(colKey, 'api');\n    }\n\n    public addAggregationColumns(colKeys: (string | Column)[]): void {\n        console.error('AG Grid: addAggregationColumns is deprecated, use addValueColumns');\n        this.columnModel.addValueColumns(colKeys, 'api');\n    }\n\n    public setColumnAggFunction(column: Column, aggFunc: string): void {\n        console.error('AG Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');\n        this.columnModel.setColumnAggFunc(column, aggFunc, 'api');\n    }\n\n    public getDisplayNameForCol(column: any): string {\n        console.error('AG Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');\n        return this.getDisplayNameForColumn(column, null);\n    }\n\n    public setColumnState(columnState: ColumnState[]): boolean {\n        return this.columnModel.applyColumnState({state: columnState, applyOrder: true}, 'api');\n    }\n\n}\n\nexport interface ApplyColumnStateParams {\n/** The state from `getColumnState` */\n    state?: ColumnState[];\n/** Whether column order should be applied */\n    applyOrder?: boolean;\n/** State to apply to columns where state is missing for those columns */\n    defaultState?: ColumnState;\n}\n"]}