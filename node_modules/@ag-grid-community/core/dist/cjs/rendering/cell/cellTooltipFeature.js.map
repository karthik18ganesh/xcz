{"version":3,"sources":["../../src/ts/rendering/cell/cellTooltipFeature.ts"],"names":[],"mappings":"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","file":"cellTooltipFeature.js","sourcesContent":["import { BeanStub } from \"../../context/beanStub\";\nimport { CellCtrl, ICellComp } from \"./cellCtrl\";\nimport { Column } from \"../../entities/column\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { Beans } from \"../beans\";\nimport { escapeString } from \"../../utils/string\";\nimport { exists } from \"../../utils/generic\";\nimport { TooltipFeature, TooltipParentComp } from \"../../widgets/tooltipFeature\";\nimport { getValueUsingField } from \"../../utils/object\";\nimport { ITooltipParams } from \"../tooltipComponent\";\n\nexport class CellTooltipFeature extends BeanStub {\n\n    private readonly cellCtrl: CellCtrl;\n    private readonly column: Column;\n    private readonly rowNode: RowNode;\n    private readonly beans: Beans;\n\n    private cellComp: ICellComp;\n\n    private tooltip: any;\n    private tooltipSanatised: string | null;\n\n    private genericTooltipFeature: TooltipFeature;\n\n    private browserTooltips: boolean;\n\n    constructor(ctrl: CellCtrl, beans: Beans) {\n        super();\n\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n\n        this.column = ctrl.getColumn();\n        this.rowNode = ctrl.getRowNode();\n    }\n\n    public setComp(comp: ICellComp): void {\n        this.cellComp = comp;\n        this.setupTooltip();\n    }\n\n    private setupTooltip(): void {\n        this.browserTooltips = this.beans.gridOptionsWrapper.isEnableBrowserTooltips();\n        this.updateTooltipText();\n\n        if (this.browserTooltips) {\n            this.cellComp.setTitle(this.tooltipSanatised != null ? this.tooltipSanatised : undefined);\n        } else {\n            this.createTooltipFeatureIfNeeded();\n        }\n    }\n\n    private updateTooltipText(): void {\n        this.tooltip = this.getToolTip();\n        this.tooltipSanatised = escapeString(this.tooltip);\n    }\n\n    private createTooltipFeatureIfNeeded(): void {\n        if (this.genericTooltipFeature != null) { return; }\n\n        const parent: TooltipParentComp = {\n            getTooltipParams: () => this.getTooltipParams(),\n            getGui: () => this.cellCtrl.getGui()\n        };\n\n        this.genericTooltipFeature = this.createManagedBean(new TooltipFeature(parent), this.beans.context);\n    }\n\n    public refreshToolTip() {\n        this.updateTooltipText();\n\n        if (this.browserTooltips) {\n            this.cellComp.setTitle(this.tooltipSanatised != null ? this.tooltipSanatised : undefined);\n        }\n    }\n\n    private getToolTip(): string | null {\n        const colDef = this.column.getColDef();\n        const data = this.rowNode.data;\n\n        if (colDef.tooltipField && exists(data)) {\n            return getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());\n        }\n\n        const valueGetter = colDef.tooltipValueGetter;\n\n        if (valueGetter) {\n            return valueGetter({\n                api: this.beans.gridOptionsWrapper.getApi()!,\n                columnApi: this.beans.gridOptionsWrapper.getColumnApi()!,\n                context: this.beans.gridOptionsWrapper.getContext(),\n                ...this.getTooltipParams(),\n                value: this.cellCtrl.getValue()\n            });\n        }\n\n        return null;\n    }\n\n    public getTooltipParams(): ITooltipParams {\n        return {\n            location: 'cell',\n            colDef: this.column.getColDef(),\n            column: this.column,\n            rowIndex: this.cellCtrl.getCellPosition().rowIndex,\n            node: this.rowNode,\n            data: this.rowNode.data,\n            value: this.getTooltipText(),\n            valueFormatted: this.cellCtrl.getValueFormatted(),\n        };\n    }\n\n    private getTooltipText() {\n        return this.tooltip;\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public destroy() {\n        super.destroy();\n    }\n}"]}